// Code generated by protoc-gen-go.
// source: gRPCServerProto.proto
// DO NOT EDIT!

/*
Package gRPCProto is a generated protocol buffer package.

It is generated from these files:
	gRPCServerProto.proto

It has these top-level messages:
	ExecRequest
	ExecReply
*/
package gRPCProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExecRequest struct {
	Params string `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExecRequest) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

type ExecReply struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ExecReply) Reset()                    { *m = ExecReply{} }
func (m *ExecReply) String() string            { return proto.CompactTextString(m) }
func (*ExecReply) ProtoMessage()               {}
func (*ExecReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExecReply) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecRequest)(nil), "gRPCProto.ExecRequest")
	proto.RegisterType((*ExecReply)(nil), "gRPCProto.ExecReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Function service

type FunctionClient interface {
	ExecuteFunc(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecReply, error)
}

type functionClient struct {
	cc *grpc.ClientConn
}

func NewFunctionClient(cc *grpc.ClientConn) FunctionClient {
	return &functionClient{cc}
}

func (c *functionClient) ExecuteFunc(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecReply, error) {
	out := new(ExecReply)
	err := grpc.Invoke(ctx, "/gRPCProto.Function/ExecuteFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Function service

type FunctionServer interface {
	ExecuteFunc(context.Context, *ExecRequest) (*ExecReply, error)
}

func RegisterFunctionServer(s *grpc.Server, srv FunctionServer) {
	s.RegisterService(&_Function_serviceDesc, srv)
}

func _Function_ExecuteFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServer).ExecuteFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPCProto.Function/ExecuteFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServer).ExecuteFunc(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Function_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCProto.Function",
	HandlerType: (*FunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFunc",
			Handler:    _Function_ExecuteFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPCServerProto.proto",
}

func init() { proto.RegisterFile("gRPCServerProto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x0f, 0x0a, 0x70,
	0x0e, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x0a, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2b, 0x00, 0x91, 0x42,
	0x9c, 0x20, 0x61, 0xb0, 0x80, 0x92, 0x2a, 0x17, 0xb7, 0x6b, 0x45, 0x6a, 0x72, 0x50, 0x6a, 0x61,
	0x69, 0x6a, 0x71, 0x89, 0x90, 0x18, 0x17, 0x5b, 0x41, 0x62, 0x51, 0x62, 0x6e, 0xb1, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0xa7, 0xa4, 0xcc, 0xc5, 0x09, 0x51, 0x56, 0x90, 0x53, 0x09,
	0x52, 0x54, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x02, 0x53, 0x04, 0xe1, 0x19, 0x79, 0x72, 0x71, 0xb8,
	0x95, 0xe6, 0x25, 0x97, 0x64, 0xe6, 0xe7, 0x09, 0xd9, 0x42, 0xcc, 0x2d, 0x2d, 0x49, 0x05, 0x09,
	0x09, 0x89, 0xe9, 0xc1, 0xad, 0xd4, 0x43, 0xb2, 0x4f, 0x4a, 0x04, 0x43, 0xbc, 0x20, 0xa7, 0x52,
	0x89, 0x21, 0x89, 0x0d, 0xec, 0x50, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x79, 0x3d,
	0x20, 0xc1, 0x00, 0x00, 0x00,
}
