// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContractAttributes struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartTimestamp string `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   string `protobuf:"bytes,3,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
}

func (m *ContractAttributes) Reset()                    { *m = ContractAttributes{} }
func (m *ContractAttributes) String() string            { return proto.CompactTextString(m) }
func (*ContractAttributes) ProtoMessage()               {}
func (*ContractAttributes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ContractAttributes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractAttributes) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *ContractAttributes) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

type ContractSignature struct {
	OwnerPubkey string `protobuf:"bytes,1,opt,name=owner_pubkey,json=ownerPubkey" json:"owner_pubkey,omitempty"`
	Signature   string `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	Timestamp   string `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ContractSignature) Reset()                    { *m = ContractSignature{} }
func (m *ContractSignature) String() string            { return proto.CompactTextString(m) }
func (*ContractSignature) ProtoMessage()               {}
func (*ContractSignature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ContractSignature) GetOwnerPubkey() string {
	if m != nil {
		return m.OwnerPubkey
	}
	return ""
}

func (m *ContractSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ContractSignature) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type ContractAssert struct {
	Id       string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Amount   float32              `protobuf:"fixed32,3,opt,name=amount" json:"amount,omitempty"`
	Metadata *google_protobuf.Any `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ContractAssert) Reset()                    { *m = ContractAssert{} }
func (m *ContractAssert) String() string            { return proto.CompactTextString(m) }
func (*ContractAssert) ProtoMessage()               {}
func (*ContractAssert) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ContractAssert) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContractAssert) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractAssert) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ContractAssert) GetMetadata() *google_protobuf.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PlanTaskCondition struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (m *PlanTaskCondition) Reset()                    { *m = PlanTaskCondition{} }
func (m *PlanTaskCondition) String() string            { return proto.CompactTextString(m) }
func (*PlanTaskCondition) ProtoMessage()               {}
func (*PlanTaskCondition) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PlanTaskCondition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlanTaskCondition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PlanTaskCondition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlanTaskCondition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PlanTaskCondition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Plan struct {
	Id           string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type         string               `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	State        string               `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Name         string               `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Description  string               `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Condition    []*PlanTaskCondition `protobuf:"bytes,6,rep,name=condition" json:"condition,omitempty"`
	Level        int32                `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	ContractType string               `protobuf:"bytes,8,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	NextTask     []string             `protobuf:"bytes,9,rep,name=next_task,json=nextTask" json:"next_task,omitempty"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Plan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Plan) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Plan) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Plan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Plan) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Plan) GetCondition() []*PlanTaskCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Plan) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Plan) GetContractType() string {
	if m != nil {
		return m.ContractType
	}
	return ""
}

func (m *Plan) GetNextTask() []string {
	if m != nil {
		return m.NextTask
	}
	return nil
}

type Task struct {
	Id           string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type         string               `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	State        string               `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Name         string               `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Description  string               `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Condition    []*PlanTaskCondition `protobuf:"bytes,6,rep,name=condition" json:"condition,omitempty"`
	Level        int32                `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	ContractType string               `protobuf:"bytes,8,opt,name=contract_type,json=contractType" json:"contract_type,omitempty"`
	NextTask     []string             `protobuf:"bytes,9,rep,name=next_task,json=nextTask" json:"next_task,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Task) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetCondition() []*PlanTaskCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Task) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Task) GetContractType() string {
	if m != nil {
		return m.ContractType
	}
	return ""
}

func (m *Task) GetNextTask() []string {
	if m != nil {
		return m.NextTask
	}
	return nil
}

type ContractComponents struct {
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans" json:"plans,omitempty"`
	Tasks []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ContractComponents) Reset()                    { *m = ContractComponents{} }
func (m *ContractComponents) String() string            { return proto.CompactTextString(m) }
func (*ContractComponents) ProtoMessage()               {}
func (*ContractComponents) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ContractComponents) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *ContractComponents) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Contract struct {
	CreatorPubkey      string               `protobuf:"bytes,1,opt,name=creator_pubkey,json=creatorPubkey" json:"creator_pubkey,omitempty"`
	CreateTimestamp    string               `protobuf:"bytes,2,opt,name=create_timestamp,json=createTimestamp" json:"create_timestamp,omitempty"`
	Operation          string               `protobuf:"bytes,3,opt,name=operation" json:"operation,omitempty"`
	ContractAttributes *ContractAttributes  `protobuf:"bytes,4,opt,name=contract_attributes,json=contractAttributes" json:"contract_attributes,omitempty"`
	ContractOwners     []string             `protobuf:"bytes,5,rep,name=contract_owners,json=contractOwners" json:"contract_owners,omitempty"`
	ContractSignatures []*ContractSignature `protobuf:"bytes,6,rep,name=contract_signatures,json=contractSignatures" json:"contract_signatures,omitempty"`
	ContractAsserts    []*ContractAssert    `protobuf:"bytes,7,rep,name=contract_asserts,json=contractAsserts" json:"contract_asserts,omitempty"`
	ContractComponents *ContractComponents  `protobuf:"bytes,8,opt,name=contract_components,json=contractComponents" json:"contract_components,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Contract) GetCreatorPubkey() string {
	if m != nil {
		return m.CreatorPubkey
	}
	return ""
}

func (m *Contract) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *Contract) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *Contract) GetContractAttributes() *ContractAttributes {
	if m != nil {
		return m.ContractAttributes
	}
	return nil
}

func (m *Contract) GetContractOwners() []string {
	if m != nil {
		return m.ContractOwners
	}
	return nil
}

func (m *Contract) GetContractSignatures() []*ContractSignature {
	if m != nil {
		return m.ContractSignatures
	}
	return nil
}

func (m *Contract) GetContractAsserts() []*ContractAssert {
	if m != nil {
		return m.ContractAsserts
	}
	return nil
}

func (m *Contract) GetContractComponents() *ContractComponents {
	if m != nil {
		return m.ContractComponents
	}
	return nil
}

type ContractProto struct {
	Id         string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NodePubkey string    `protobuf:"bytes,2,opt,name=node_pubkey,json=nodePubkey" json:"node_pubkey,omitempty"`
	MainPubkey string    `protobuf:"bytes,3,opt,name=main_pubkey,json=mainPubkey" json:"main_pubkey,omitempty"`
	Signature  string    `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	Voters     []string  `protobuf:"bytes,5,rep,name=voters" json:"voters,omitempty"`
	Timestamp  string    `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Version    int32     `protobuf:"varint,7,opt,name=version" json:"version,omitempty"`
	Contract   *Contract `protobuf:"bytes,8,opt,name=contract" json:"contract,omitempty"`
}

func (m *ContractProto) Reset()                    { *m = ContractProto{} }
func (m *ContractProto) String() string            { return proto.CompactTextString(m) }
func (*ContractProto) ProtoMessage()               {}
func (*ContractProto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ContractProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContractProto) GetNodePubkey() string {
	if m != nil {
		return m.NodePubkey
	}
	return ""
}

func (m *ContractProto) GetMainPubkey() string {
	if m != nil {
		return m.MainPubkey
	}
	return ""
}

func (m *ContractProto) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ContractProto) GetVoters() []string {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *ContractProto) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ContractProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ContractProto) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractAttributes)(nil), "protos.ContractAttributes")
	proto.RegisterType((*ContractSignature)(nil), "protos.ContractSignature")
	proto.RegisterType((*ContractAssert)(nil), "protos.ContractAssert")
	proto.RegisterType((*PlanTaskCondition)(nil), "protos.PlanTaskCondition")
	proto.RegisterType((*Plan)(nil), "protos.Plan")
	proto.RegisterType((*Task)(nil), "protos.Task")
	proto.RegisterType((*ContractComponents)(nil), "protos.ContractComponents")
	proto.RegisterType((*Contract)(nil), "protos.Contract")
	proto.RegisterType((*ContractProto)(nil), "protos.ContractProto")
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4f, 0x6f, 0xd4, 0x3e,
	0x10, 0x55, 0xb2, 0x7f, 0xba, 0x99, 0x6d, 0xb7, 0xad, 0x7f, 0x55, 0x95, 0xf6, 0x57, 0xa9, 0x4b,
	0x10, 0xea, 0x22, 0xa1, 0x2d, 0x2a, 0x07, 0xce, 0x55, 0x6f, 0x70, 0xa0, 0x0a, 0x3d, 0x22, 0xad,
	0xbc, 0x89, 0xa9, 0xa2, 0x6e, 0xec, 0x28, 0x9e, 0x5d, 0xd8, 0x0b, 0x17, 0x0e, 0x7c, 0x39, 0xbe,
	0x12, 0x12, 0xb2, 0x1d, 0x3b, 0x69, 0x52, 0x09, 0x3e, 0x00, 0xa7, 0xf5, 0x3c, 0xcf, 0xce, 0x3c,
	0x3f, 0x7b, 0x5e, 0x60, 0x92, 0x08, 0x8e, 0x25, 0x4d, 0x70, 0x5e, 0x94, 0x02, 0x05, 0x19, 0xea,
	0x1f, 0x79, 0x7a, 0x72, 0x2f, 0xc4, 0xfd, 0x8a, 0x5d, 0xea, 0x70, 0xb9, 0xfe, 0x7c, 0x49, 0xf9,
	0xd6, 0xa4, 0x44, 0x1b, 0x20, 0x37, 0xd5, 0x9f, 0xae, 0x11, 0xcb, 0x6c, 0xb9, 0x46, 0x26, 0x09,
	0x81, 0x3e, 0xa7, 0x39, 0x0b, 0xbd, 0xa9, 0x37, 0x0b, 0x62, 0xbd, 0x26, 0x17, 0xb0, 0x2f, 0x91,
	0x96, 0xb8, 0xc0, 0x2c, 0x67, 0x12, 0x69, 0x5e, 0x84, 0xbe, 0xde, 0x9e, 0x68, 0xf8, 0xce, 0xa2,
	0xe4, 0x39, 0xec, 0x31, 0x9e, 0x36, 0xd2, 0x7a, 0x3a, 0x6d, 0x97, 0xf1, 0xd4, 0x25, 0x45, 0x25,
	0x1c, 0xda, 0xbe, 0x1f, 0xb3, 0x7b, 0x4e, 0x71, 0x5d, 0x32, 0xf2, 0x0c, 0x76, 0xc5, 0x17, 0xce,
	0xca, 0x45, 0xb1, 0x5e, 0x3e, 0xb0, 0x6d, 0xd5, 0x7e, 0xac, 0xb1, 0x5b, 0x0d, 0x91, 0x33, 0x08,
	0xa4, 0xcd, 0xaf, 0xfa, 0xd7, 0x80, 0xda, 0x6d, 0xb7, 0xad, 0x81, 0xe8, 0x1b, 0x4c, 0xdc, 0x59,
	0xa5, 0x64, 0x25, 0x92, 0x09, 0xf8, 0x59, 0x5a, 0xb5, 0xf1, 0xb3, 0xd4, 0x9d, 0xdb, 0x6f, 0x9c,
	0xfb, 0x18, 0x86, 0x34, 0x17, 0x6b, 0x8e, 0xba, 0xa0, 0x1f, 0x57, 0x11, 0x79, 0x0d, 0xa3, 0x9c,
	0x21, 0x4d, 0x29, 0xd2, 0xb0, 0x3f, 0xf5, 0x66, 0xe3, 0xab, 0xa3, 0xb9, 0xd1, 0x79, 0x6e, 0x75,
	0x9e, 0x5f, 0xf3, 0x6d, 0xec, 0xb2, 0xa2, 0xef, 0x1e, 0x1c, 0xde, 0xae, 0x28, 0xbf, 0xa3, 0xf2,
	0xe1, 0x46, 0xf0, 0x34, 0xc3, 0x4c, 0xf0, 0xa7, 0x38, 0xe0, 0xb6, 0x70, 0x1c, 0xd4, 0xda, 0xf1,
	0xea, 0x35, 0x78, 0x1d, 0xc1, 0x60, 0x43, 0x57, 0x6b, 0xa6, 0x9b, 0x07, 0xb1, 0x09, 0xc8, 0x14,
	0xc6, 0x29, 0x93, 0x49, 0x99, 0x15, 0xaa, 0x78, 0x38, 0x30, 0x0a, 0x36, 0xa0, 0xe8, 0x87, 0x0f,
	0x7d, 0xc5, 0xe2, 0xaf, 0x1a, 0x1f, 0xc1, 0x40, 0x22, 0x45, 0xdb, 0xd9, 0x04, 0x8e, 0x4e, 0xbf,
	0x41, 0xe7, 0x8f, 0x8d, 0xc9, 0x5b, 0x08, 0x12, 0x7b, 0xea, 0x70, 0x38, 0xed, 0xcd, 0xc6, 0x57,
	0x27, 0x46, 0x2a, 0x39, 0xef, 0xc8, 0x12, 0xd7, 0xb9, 0x8a, 0xc4, 0x8a, 0x6d, 0xd8, 0x2a, 0xdc,
	0x99, 0x7a, 0xb3, 0x41, 0x6c, 0x02, 0xf5, 0xcc, 0xec, 0x73, 0x5f, 0x68, 0xde, 0x23, 0xf3, 0xcc,
	0x2c, 0x78, 0xa7, 0xf8, 0xff, 0x0f, 0x01, 0x67, 0x5f, 0x71, 0x81, 0x54, 0x3e, 0x84, 0xc1, 0xb4,
	0x37, 0x0b, 0xe2, 0x91, 0x02, 0x54, 0x2f, 0xad, 0x84, 0x5a, 0xfc, 0x53, 0xe2, 0x53, 0xed, 0x02,
	0x37, 0x22, 0x2f, 0x04, 0x67, 0x1c, 0x25, 0x89, 0x60, 0x50, 0xac, 0x28, 0x97, 0xa1, 0xa7, 0x29,
	0xee, 0x36, 0x29, 0xc6, 0x66, 0x4b, 0xe5, 0xa8, 0x8a, 0x32, 0xf4, 0x1f, 0xe7, 0xa8, 0xb2, 0xb1,
	0xd9, 0x8a, 0x7e, 0xf6, 0x60, 0x64, 0xcb, 0x93, 0x17, 0x30, 0x49, 0x4a, 0x46, 0x51, 0xb4, 0xa6,
	0x7c, 0xaf, 0x42, 0xab, 0x39, 0x7f, 0x09, 0x07, 0x1a, 0x60, 0x1d, 0xbb, 0xd9, 0x37, 0x78, 0xed,
	0x37, 0x67, 0x10, 0x88, 0x82, 0x95, 0x54, 0xab, 0x59, 0x0d, 0xbd, 0x03, 0xc8, 0x7b, 0xf8, 0xcf,
	0x89, 0x43, 0x9d, 0xc3, 0x55, 0x13, 0x7b, 0x6a, 0xe9, 0x76, 0x3d, 0x30, 0x26, 0x49, 0xd7, 0x17,
	0x2f, 0x60, 0xdf, 0x15, 0xd3, 0xae, 0x24, 0xc3, 0x81, 0x96, 0xd2, 0x39, 0xef, 0x07, 0x8d, 0x92,
	0x77, 0x8d, 0xae, 0xce, 0x9e, 0x64, 0xfb, 0xae, 0x3b, 0x0e, 0x58, 0x37, 0x75, 0x90, 0x24, 0xd7,
	0x70, 0x50, 0x9f, 0x40, 0xfb, 0x96, 0x0c, 0x77, 0x74, 0xa1, 0xe3, 0x0e, 0x7d, 0xbd, 0x1d, 0x3b,
	0x92, 0x26, 0x96, 0x8f, 0x44, 0x48, 0xdc, 0x05, 0xeb, 0x77, 0xf2, 0x84, 0x08, 0xf5, 0x13, 0xa8,
	0xf9, 0xd4, 0x58, 0xf4, 0xcb, 0x83, 0x3d, 0x9b, 0x7a, 0xab, 0xbf, 0x33, 0xed, 0xf9, 0x39, 0x87,
	0x31, 0x17, 0x29, 0xb3, 0x17, 0x6c, 0xee, 0x0d, 0x14, 0x54, 0xdd, 0xee, 0x39, 0x8c, 0x73, 0x9a,
	0x71, 0x9b, 0x60, 0x2e, 0x0d, 0x14, 0xf4, 0x94, 0xcd, 0xf7, 0xdb, 0x36, 0x7f, 0x0c, 0xc3, 0x8d,
	0xc0, 0x5a, 0xfd, 0x2a, 0x7a, 0x6c, 0xff, 0xc3, 0x96, 0xfd, 0x93, 0x10, 0x76, 0x36, 0xac, 0x94,
	0xea, 0x95, 0x98, 0xf1, 0xb1, 0x21, 0x79, 0x05, 0x23, 0x7b, 0xce, 0x4a, 0x93, 0x83, 0xb6, 0x26,
	0xb1, 0xcb, 0x58, 0x9a, 0xaf, 0xea, 0x9b, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x08, 0x5f,
	0xa6, 0x6e, 0x07, 0x00, 0x00,
}
