// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContractSignature struct {
	OwnerPubkey   string `protobuf:"bytes,1,opt,name=OwnerPubkey" json:"OwnerPubkey"`
	Signature     string `protobuf:"bytes,2,opt,name=Signature" json:"Signature"`
	SignTimestamp string `protobuf:"bytes,3,opt,name=SignTimestamp" json:"SignTimestamp"`
}

func (m *ContractSignature) Reset()                    { *m = ContractSignature{} }
func (m *ContractSignature) String() string            { return proto.CompactTextString(m) }
func (*ContractSignature) ProtoMessage()               {}
func (*ContractSignature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ContractSignature) GetOwnerPubkey() string {
	if m != nil {
		return m.OwnerPubkey
	}
	return ""
}

func (m *ContractSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ContractSignature) GetSignTimestamp() string {
	if m != nil {
		return m.SignTimestamp
	}
	return ""
}

type ContractAsset struct {
	AssetId     string  `protobuf:"bytes,1,opt,name=AssetId" json:"AssetId"`
	Name        string  `protobuf:"bytes,2,opt,name=Name" json:"Name"`
	Caption     string  `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description string  `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	Unit        string  `protobuf:"bytes,5,opt,name=Unit" json:"Unit"`
	Amount      float32 `protobuf:"fixed32,6,opt,name=Amount" json:"Amount"`
	MetaData    []byte  `protobuf:"bytes,7,opt,name=MetaData,proto3" json:"MetaData"`
}

func (m *ContractAsset) Reset()                    { *m = ContractAsset{} }
func (m *ContractAsset) String() string            { return proto.CompactTextString(m) }
func (*ContractAsset) ProtoMessage()               {}
func (*ContractAsset) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ContractAsset) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *ContractAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractAsset) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractAsset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractAsset) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *ContractAsset) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ContractAsset) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

type ExpressionResult struct {
	Messsage string `protobuf:"bytes,1,opt,name=Messsage" json:"Messsage"`
	Code     int32  `protobuf:"varint,2,opt,name=Code" json:"Code"`
}

func (m *ExpressionResult) Reset()                    { *m = ExpressionResult{} }
func (m *ExpressionResult) String() string            { return proto.CompactTextString(m) }
func (*ExpressionResult) ProtoMessage()               {}
func (*ExpressionResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ExpressionResult) GetMesssage() string {
	if m != nil {
		return m.Messsage
	}
	return ""
}

func (m *ExpressionResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ComponentsExpression struct {
	Cname            string            `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype            string            `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption          string            `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description      string            `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	ExpressionStr    string            `protobuf:"bytes,5,opt,name=ExpressionStr" json:"ExpressionStr"`
	ExpressionResult *ExpressionResult `protobuf:"bytes,6,opt,name=ExpressionResult" json:"ExpressionResult"`
	LogicValue       int32             `protobuf:"varint,7,opt,name=LogicValue" json:"LogicValue"`
}

func (m *ComponentsExpression) Reset()                    { *m = ComponentsExpression{} }
func (m *ComponentsExpression) String() string            { return proto.CompactTextString(m) }
func (*ComponentsExpression) ProtoMessage()               {}
func (*ComponentsExpression) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ComponentsExpression) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ComponentsExpression) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ComponentsExpression) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ComponentsExpression) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComponentsExpression) GetExpressionStr() string {
	if m != nil {
		return m.ExpressionStr
	}
	return ""
}

func (m *ComponentsExpression) GetExpressionResult() *ExpressionResult {
	if m != nil {
		return m.ExpressionResult
	}
	return nil
}

func (m *ComponentsExpression) GetLogicValue() int32 {
	if m != nil {
		return m.LogicValue
	}
	return 0
}

type ComponentData struct {
	Cname        string           `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype        string           `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption      string           `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description  string           `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	ModifyDate   string           `protobuf:"bytes,5,opt,name=ModifyDate" json:"ModifyDate"`
	HardConvType string           `protobuf:"bytes,6,opt,name=HardConvType" json:"HardConvType"`
	Category     []string         `protobuf:"bytes,7,rep,name=Category" json:"Category"`
	Parent       *ComponentData   `protobuf:"bytes,8,opt,name=Parent" json:"Parent"`
	Mandatory    bool             `protobuf:"varint,9,opt,name=Mandatory" json:"Mandatory"`
	Unit         string           `protobuf:"bytes,10,opt,name=Unit" json:"Unit"`
	Options      map[string]int32 `protobuf:"bytes,11,rep,name=Options" json:"Options" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Format       string           `protobuf:"bytes,12,opt,name=Format" json:"Format"`
	// Value interface{} int64
	ValueInt int64 `protobuf:"varint,13,opt,name=ValueInt" json:"ValueInt"`
	// Value interface{} unit64
	ValueUint uint64 `protobuf:"varint,14,opt,name=ValueUint" json:"ValueUint"`
	// Value interface{} float64
	ValueFloat float64 `protobuf:"fixed64,15,opt,name=ValueFloat" json:"ValueFloat"`
	// Value interface{} string
	ValueString string `protobuf:"bytes,16,opt,name=ValueString" json:"ValueString"`
	// DefaultValue interface{} int64
	DefaultValueInt int64 `protobuf:"varint,17,opt,name=DefaultValueInt" json:"DefaultValueInt"`
	// DefaultValue interface{} unit64
	DefaultValueUint uint64 `protobuf:"varint,18,opt,name=DefaultValueUint" json:"DefaultValueUint"`
	// DefaultValue interface{} float64
	DefaultValueFloat float64 `protobuf:"fixed64,19,opt,name=DefaultValueFloat" json:"DefaultValueFloat"`
	// DefaultValueinterface{} string
	DefaultValueString string `protobuf:"bytes,20,opt,name=DefaultValueString" json:"DefaultValueString"`
	// DataRange interface{} int64
	DataRangeInt []int64 `protobuf:"varint,21,rep,packed,name=DataRangeInt" json:"DataRangeInt"`
	// DataRange interface{} unit64
	DataRangeUint []uint64 `protobuf:"varint,22,rep,packed,name=DataRangeUint" json:"DataRangeUint"`
	// DataRange interface{} float64
	DataRangeFloat []float64 `protobuf:"fixed64,23,rep,packed,name=DataRangeFloat" json:"DataRangeFloat"`
}

func (m *ComponentData) Reset()                    { *m = ComponentData{} }
func (m *ComponentData) String() string            { return proto.CompactTextString(m) }
func (*ComponentData) ProtoMessage()               {}
func (*ComponentData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ComponentData) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ComponentData) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ComponentData) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ComponentData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComponentData) GetModifyDate() string {
	if m != nil {
		return m.ModifyDate
	}
	return ""
}

func (m *ComponentData) GetHardConvType() string {
	if m != nil {
		return m.HardConvType
	}
	return ""
}

func (m *ComponentData) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *ComponentData) GetParent() *ComponentData {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ComponentData) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *ComponentData) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *ComponentData) GetOptions() map[string]int32 {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ComponentData) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ComponentData) GetValueInt() int64 {
	if m != nil {
		return m.ValueInt
	}
	return 0
}

func (m *ComponentData) GetValueUint() uint64 {
	if m != nil {
		return m.ValueUint
	}
	return 0
}

func (m *ComponentData) GetValueFloat() float64 {
	if m != nil {
		return m.ValueFloat
	}
	return 0
}

func (m *ComponentData) GetValueString() string {
	if m != nil {
		return m.ValueString
	}
	return ""
}

func (m *ComponentData) GetDefaultValueInt() int64 {
	if m != nil {
		return m.DefaultValueInt
	}
	return 0
}

func (m *ComponentData) GetDefaultValueUint() uint64 {
	if m != nil {
		return m.DefaultValueUint
	}
	return 0
}

func (m *ComponentData) GetDefaultValueFloat() float64 {
	if m != nil {
		return m.DefaultValueFloat
	}
	return 0
}

func (m *ComponentData) GetDefaultValueString() string {
	if m != nil {
		return m.DefaultValueString
	}
	return ""
}

func (m *ComponentData) GetDataRangeInt() []int64 {
	if m != nil {
		return m.DataRangeInt
	}
	return nil
}

func (m *ComponentData) GetDataRangeUint() []uint64 {
	if m != nil {
		return m.DataRangeUint
	}
	return nil
}

func (m *ComponentData) GetDataRangeFloat() []float64 {
	if m != nil {
		return m.DataRangeFloat
	}
	return nil
}

type SelectBranchExpression struct {
	BranchExpressionStr   string `protobuf:"bytes,1,opt,name=BranchExpressionStr" json:"BranchExpressionStr"`
	BranchExpressionValue string `protobuf:"bytes,2,opt,name=BranchExpressionValue" json:"BranchExpressionValue"`
}

func (m *SelectBranchExpression) Reset()                    { *m = SelectBranchExpression{} }
func (m *SelectBranchExpression) String() string            { return proto.CompactTextString(m) }
func (*SelectBranchExpression) ProtoMessage()               {}
func (*SelectBranchExpression) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SelectBranchExpression) GetBranchExpressionStr() string {
	if m != nil {
		return m.BranchExpressionStr
	}
	return ""
}

func (m *SelectBranchExpression) GetBranchExpressionValue() string {
	if m != nil {
		return m.BranchExpressionValue
	}
	return ""
}

type ContractComponent struct {
	Cname                         string                  `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype                         string                  `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption                       string                  `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description                   string                  `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	State                         string                  `protobuf:"bytes,5,opt,name=State" json:"State"`
	PreCondition                  []*ComponentsExpression `protobuf:"bytes,6,rep,name=PreCondition" json:"PreCondition"`
	CompleteCondition             []*ComponentsExpression `protobuf:"bytes,7,rep,name=CompleteCondition" json:"CompleteCondition"`
	DiscardCondition              []*ComponentsExpression `protobuf:"bytes,8,rep,name=DiscardCondition" json:"DiscardCondition"`
	NextTasks                     []string                `protobuf:"bytes,9,rep,name=NextTasks" json:"NextTasks"`
	DataList                      []*ComponentData        `protobuf:"bytes,10,rep,name=DataList" json:"DataList"`
	DataValueSetterExpressionList []*ComponentsExpression `protobuf:"bytes,11,rep,name=DataValueSetterExpressionList" json:"DataValueSetterExpressionList"`
	CandidateList                 *ContractComponent      `protobuf:"bytes,12,opt,name=CandidateList" json:"CandidateList"`
	DecisionResult                *ContractComponent      `protobuf:"bytes,13,opt,name=DecisionResult" json:"DecisionResult"`
	TaskList                      []string                `protobuf:"bytes,14,rep,name=TaskList" json:"TaskList"`
	SupportArguments              []string                `protobuf:"bytes,15,rep,name=SupportArguments" json:"SupportArguments"`
	AgainstArguments              []string                `protobuf:"bytes,16,rep,name=AgainstArguments" json:"AgainstArguments"`
	Support                       int32                   `protobuf:"varint,17,opt,name=Support" json:"Support"`
	Text                          []string                `protobuf:"bytes,18,rep,name=Text" json:"Text"`
	// add date: 2017-05-11 任务执行索引次数 int
	TaskExecuteIdx int32  `protobuf:"varint,19,opt,name=TaskExecuteIdx" json:"TaskExecuteIdx"`
	TaskId         string `protobuf:"bytes,20,opt,name=TaskId" json:"TaskId"`
	// 2017-05-27 17:10:00 add
	SelectBranches []*SelectBranchExpression `protobuf:"bytes,21,rep,name=SelectBranches" json:"SelectBranches"`
}

func (m *ContractComponent) Reset()                    { *m = ContractComponent{} }
func (m *ContractComponent) String() string            { return proto.CompactTextString(m) }
func (*ContractComponent) ProtoMessage()               {}
func (*ContractComponent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ContractComponent) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ContractComponent) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ContractComponent) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractComponent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractComponent) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ContractComponent) GetPreCondition() []*ComponentsExpression {
	if m != nil {
		return m.PreCondition
	}
	return nil
}

func (m *ContractComponent) GetCompleteCondition() []*ComponentsExpression {
	if m != nil {
		return m.CompleteCondition
	}
	return nil
}

func (m *ContractComponent) GetDiscardCondition() []*ComponentsExpression {
	if m != nil {
		return m.DiscardCondition
	}
	return nil
}

func (m *ContractComponent) GetNextTasks() []string {
	if m != nil {
		return m.NextTasks
	}
	return nil
}

func (m *ContractComponent) GetDataList() []*ComponentData {
	if m != nil {
		return m.DataList
	}
	return nil
}

func (m *ContractComponent) GetDataValueSetterExpressionList() []*ComponentsExpression {
	if m != nil {
		return m.DataValueSetterExpressionList
	}
	return nil
}

func (m *ContractComponent) GetCandidateList() *ContractComponent {
	if m != nil {
		return m.CandidateList
	}
	return nil
}

func (m *ContractComponent) GetDecisionResult() *ContractComponent {
	if m != nil {
		return m.DecisionResult
	}
	return nil
}

func (m *ContractComponent) GetTaskList() []string {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ContractComponent) GetSupportArguments() []string {
	if m != nil {
		return m.SupportArguments
	}
	return nil
}

func (m *ContractComponent) GetAgainstArguments() []string {
	if m != nil {
		return m.AgainstArguments
	}
	return nil
}

func (m *ContractComponent) GetSupport() int32 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *ContractComponent) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *ContractComponent) GetTaskExecuteIdx() int32 {
	if m != nil {
		return m.TaskExecuteIdx
	}
	return 0
}

func (m *ContractComponent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ContractComponent) GetSelectBranches() []*SelectBranchExpression {
	if m != nil {
		return m.SelectBranches
	}
	return nil
}

type ContractBody struct {
	ContractId         string               `protobuf:"bytes,1,opt,name=ContractId" json:"ContractId"`
	Cname              string               `protobuf:"bytes,2,opt,name=Cname" json:"Cname"`
	Ctype              string               `protobuf:"bytes,3,opt,name=Ctype" json:"Ctype"`
	Caption            string               `protobuf:"bytes,4,opt,name=Caption" json:"Caption"`
	Description        string               `protobuf:"bytes,5,opt,name=Description" json:"Description"`
	ContractState      string               `protobuf:"bytes,6,opt,name=ContractState" json:"ContractState"`
	Creator            string               `protobuf:"bytes,7,opt,name=Creator" json:"Creator"`
	CreateTime         string               `protobuf:"bytes,8,opt,name=CreateTime" json:"CreateTime"`
	StartTime          string               `protobuf:"bytes,9,opt,name=StartTime" json:"StartTime"`
	EndTime            string               `protobuf:"bytes,10,opt,name=EndTime" json:"EndTime"`
	ContractOwners     []string             `protobuf:"bytes,11,rep,name=ContractOwners" json:"ContractOwners"`
	ContractAssets     []*ContractAsset     `protobuf:"bytes,12,rep,name=ContractAssets" json:"ContractAssets"`
	ContractSignatures []*ContractSignature `protobuf:"bytes,13,rep,name=ContractSignatures" json:"ContractSignatures"`
	ContractComponents []*ContractComponent `protobuf:"bytes,14,rep,name=ContractComponents" json:"ContractComponents"`
	// add date: 2017-05-11 map[string]interface{} 合约属性MetaData
	//    bytes MetaAttribute = 15;
	MetaAttribute map[string]string `protobuf:"bytes,15,rep,name=MetaAttribute" json:"MetaAttribute" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NextTasks     []string          `protobuf:"bytes,16,rep,name=NextTasks" json:"NextTasks"`
}

func (m *ContractBody) Reset()                    { *m = ContractBody{} }
func (m *ContractBody) String() string            { return proto.CompactTextString(m) }
func (*ContractBody) ProtoMessage()               {}
func (*ContractBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ContractBody) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *ContractBody) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ContractBody) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ContractBody) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractBody) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractBody) GetContractState() string {
	if m != nil {
		return m.ContractState
	}
	return ""
}

func (m *ContractBody) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ContractBody) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *ContractBody) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ContractBody) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ContractBody) GetContractOwners() []string {
	if m != nil {
		return m.ContractOwners
	}
	return nil
}

func (m *ContractBody) GetContractAssets() []*ContractAsset {
	if m != nil {
		return m.ContractAssets
	}
	return nil
}

func (m *ContractBody) GetContractSignatures() []*ContractSignature {
	if m != nil {
		return m.ContractSignatures
	}
	return nil
}

func (m *ContractBody) GetContractComponents() []*ContractComponent {
	if m != nil {
		return m.ContractComponents
	}
	return nil
}

func (m *ContractBody) GetMetaAttribute() map[string]string {
	if m != nil {
		return m.MetaAttribute
	}
	return nil
}

func (m *ContractBody) GetNextTasks() []string {
	if m != nil {
		return m.NextTasks
	}
	return nil
}

type ContractHead struct {
	MainPubkey string `protobuf:"bytes,1,opt,name=MainPubkey" json:"MainPubkey"`
	Version    int32  `protobuf:"varint,2,opt,name=Version" json:"Version"`
	// 指派处理时间 add 2017-05-27 17:10:0
	AssignTime string `protobuf:"bytes,3,opt,name=AssignTime" json:"AssignTime"`
	// add date: 2017-05-11 合约执行时间戳
	// 操作时间,记录状态改变时间, Timestamp修改而来 2017-05-27 17:10:0
	OperateTime string `protobuf:"bytes,4,opt,name=OperateTime" json:"OperateTime"`
	// add date: 2017-06-01 共识结果,是否共识等
	ConsensusResult int32 `protobuf:"varint,5,opt,name=ConsensusResult" json:"ConsensusResult"`
}

func (m *ContractHead) Reset()                    { *m = ContractHead{} }
func (m *ContractHead) String() string            { return proto.CompactTextString(m) }
func (*ContractHead) ProtoMessage()               {}
func (*ContractHead) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ContractHead) GetMainPubkey() string {
	if m != nil {
		return m.MainPubkey
	}
	return ""
}

func (m *ContractHead) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ContractHead) GetAssignTime() string {
	if m != nil {
		return m.AssignTime
	}
	return ""
}

func (m *ContractHead) GetOperateTime() string {
	if m != nil {
		return m.OperateTime
	}
	return ""
}

func (m *ContractHead) GetConsensusResult() int32 {
	if m != nil {
		return m.ConsensusResult
	}
	return 0
}

type Contract struct {
	Id           string        `protobuf:"bytes,1,opt,name=id" json:"id"`
	ContractHead *ContractHead `protobuf:"bytes,2,opt,name=ContractHead" json:"ContractHead"`
	ContractBody *ContractBody `protobuf:"bytes,3,opt,name=ContractBody" json:"ContractBody"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Contract) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Contract) GetContractHead() *ContractHead {
	if m != nil {
		return m.ContractHead
	}
	return nil
}

func (m *Contract) GetContractBody() *ContractBody {
	if m != nil {
		return m.ContractBody
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractSignature)(nil), "protos.ContractSignature")
	proto.RegisterType((*ContractAsset)(nil), "protos.ContractAsset")
	proto.RegisterType((*ExpressionResult)(nil), "protos.ExpressionResult")
	proto.RegisterType((*ComponentsExpression)(nil), "protos.ComponentsExpression")
	proto.RegisterType((*ComponentData)(nil), "protos.ComponentData")
	proto.RegisterType((*SelectBranchExpression)(nil), "protos.SelectBranchExpression")
	proto.RegisterType((*ContractComponent)(nil), "protos.ContractComponent")
	proto.RegisterType((*ContractBody)(nil), "protos.ContractBody")
	proto.RegisterType((*ContractHead)(nil), "protos.ContractHead")
	proto.RegisterType((*Contract)(nil), "protos.Contract")
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6e, 0x1b, 0x37,
	0x13, 0xc7, 0x4a, 0x96, 0x6c, 0x51, 0x7f, 0xa2, 0x30, 0x4e, 0xbe, 0xfd, 0x82, 0x34, 0x58, 0x08,
	0x69, 0x2b, 0x14, 0xad, 0xd1, 0xba, 0x3d, 0x04, 0x41, 0x8b, 0x46, 0x96, 0x1c, 0xc4, 0x45, 0x9c,
	0x18, 0xb4, 0x93, 0x3b, 0xad, 0x65, 0xd4, 0x45, 0x24, 0xae, 0x40, 0x52, 0xa9, 0x75, 0xeb, 0xb9,
	0x87, 0x3e, 0x4d, 0x5f, 0xa0, 0xf7, 0x3e, 0x41, 0x9f, 0xa1, 0x0f, 0x51, 0xcc, 0x90, 0xbb, 0xcb,
	0x5d, 0x29, 0x89, 0x81, 0x02, 0x39, 0x2d, 0xe7, 0xc7, 0x99, 0xe1, 0xcc, 0x70, 0x66, 0x38, 0x4b,
	0x7a, 0xd3, 0x54, 0x1a, 0xc5, 0xa7, 0xe6, 0x60, 0xa9, 0x52, 0x93, 0xd2, 0x26, 0x7e, 0xf4, 0x60,
	0x4d, 0x6e, 0x8e, 0xdd, 0xce, 0x79, 0x32, 0x93, 0xdc, 0xac, 0x94, 0xa0, 0x11, 0x69, 0xbf, 0xf8,
	0x45, 0x0a, 0x75, 0xb6, 0xba, 0x7c, 0x23, 0xd6, 0x61, 0x10, 0x05, 0xc3, 0x16, 0xf3, 0x21, 0x7a,
	0x8f, 0xb4, 0x72, 0xf6, 0xb0, 0x86, 0xfb, 0x05, 0x40, 0x1f, 0x90, 0x2e, 0x10, 0x17, 0xc9, 0x42,
	0x68, 0xc3, 0x17, 0xcb, 0xb0, 0x8e, 0x1c, 0x65, 0x70, 0xf0, 0x67, 0x40, 0xba, 0xd9, 0xd9, 0x23,
	0xad, 0x85, 0xa1, 0x21, 0xd9, 0xc5, 0xc5, 0x49, 0xec, 0xce, 0xcc, 0x48, 0x4a, 0xc9, 0xce, 0x73,
	0xbe, 0xc8, 0x8e, 0xc2, 0x35, 0x70, 0x8f, 0xf9, 0xd2, 0x24, 0xa9, 0x74, 0xfa, 0x33, 0x12, 0xec,
	0x9f, 0x08, 0x3d, 0x55, 0x89, 0xdd, 0xdd, 0xb1, 0xf6, 0x7b, 0x10, 0xe8, 0x7b, 0x29, 0x13, 0x13,
	0x36, 0xac, 0x3e, 0x58, 0xd3, 0x3b, 0xa4, 0x39, 0x5a, 0xa4, 0x2b, 0x69, 0xc2, 0x66, 0x14, 0x0c,
	0x6b, 0xcc, 0x51, 0xf4, 0x2e, 0xd9, 0x3b, 0x15, 0x86, 0x4f, 0xb8, 0xe1, 0xe1, 0x6e, 0x14, 0x0c,
	0x3b, 0x2c, 0xa7, 0x07, 0x47, 0xa4, 0x7f, 0x7c, 0xb5, 0x54, 0x42, 0xeb, 0x24, 0x95, 0x4c, 0xe8,
	0xd5, 0xdc, 0xf1, 0x6b, 0xad, 0xf9, 0x4c, 0x38, 0x37, 0x72, 0x1a, 0xce, 0x1d, 0xa7, 0xb1, 0xf5,
	0xa3, 0xc1, 0x70, 0x3d, 0xf8, 0xad, 0x46, 0xf6, 0xc7, 0xe9, 0x62, 0x99, 0x4a, 0x21, 0x8d, 0x2e,
	0xd4, 0xd1, 0x7d, 0xd2, 0x18, 0x4b, 0xf0, 0xda, 0x6a, 0xb1, 0x04, 0xa2, 0x66, 0xbd, 0xcc, 0x62,
	0x61, 0x89, 0xff, 0x14, 0x8c, 0x07, 0xa4, 0x5b, 0x9c, 0x7a, 0x6e, 0x94, 0x8b, 0x4a, 0x19, 0xa4,
	0x93, 0x4d, 0x57, 0x31, 0x50, 0xed, 0xc3, 0xd0, 0xe6, 0x94, 0x3e, 0xa8, 0xee, 0xb3, 0xcd, 0xe0,
	0xdc, 0x27, 0xe4, 0x59, 0x3a, 0x4b, 0xa6, 0xaf, 0xf8, 0x7c, 0x25, 0x30, 0x9c, 0x0d, 0xe6, 0x21,
	0x83, 0x7f, 0x9a, 0x90, 0x14, 0x2e, 0x18, 0x10, 0xe2, 0x8f, 0x16, 0x85, 0xfb, 0x84, 0x9c, 0xa6,
	0x71, 0xf2, 0x7a, 0x3d, 0xe1, 0x46, 0xb8, 0x10, 0x78, 0x08, 0x1d, 0x90, 0xce, 0x53, 0xae, 0xe2,
	0x71, 0x2a, 0xdf, 0x5e, 0xc0, 0xc1, 0x4d, 0xe4, 0x28, 0x61, 0x70, 0xf5, 0x63, 0x6e, 0xc4, 0x2c,
	0x55, 0xeb, 0x70, 0x37, 0xaa, 0xc3, 0xd5, 0x67, 0x34, 0xfd, 0x8a, 0x34, 0xcf, 0xb8, 0x12, 0xd2,
	0x84, 0x7b, 0x18, 0xb5, 0xdb, 0x59, 0xd4, 0x4a, 0xee, 0x32, 0xc7, 0x04, 0x15, 0x76, 0xca, 0x65,
	0xcc, 0x0d, 0xe8, 0x6a, 0x45, 0xc1, 0x70, 0x8f, 0x15, 0x40, 0x9e, 0xbf, 0xc4, 0xcb, 0xdf, 0xef,
	0xc9, 0xee, 0x0b, 0x74, 0x45, 0x87, 0xed, 0xa8, 0x3e, 0x6c, 0x1f, 0x0e, 0xb6, 0x9e, 0x70, 0xe0,
	0x98, 0x8e, 0xa5, 0x51, 0x6b, 0x96, 0x89, 0x40, 0xf6, 0x3f, 0x49, 0xd5, 0x82, 0x9b, 0xb0, 0x83,
	0x3a, 0x1d, 0x05, 0x2e, 0xe1, 0xcd, 0x9c, 0x48, 0x13, 0x76, 0xa3, 0x60, 0x58, 0x67, 0x39, 0x0d,
	0x36, 0xe2, 0xfa, 0x65, 0x22, 0x4d, 0xd8, 0x8b, 0x82, 0xe1, 0x0e, 0x2b, 0x00, 0x08, 0x28, 0x12,
	0x4f, 0xe6, 0x29, 0x37, 0xe1, 0x8d, 0x28, 0x18, 0x06, 0xcc, 0x43, 0xe0, 0x4a, 0x90, 0x3a, 0x37,
	0x2a, 0x91, 0xb3, 0xb0, 0x6f, 0xaf, 0xc4, 0x83, 0xe8, 0x90, 0xdc, 0x98, 0x88, 0xd7, 0x7c, 0x35,
	0x37, 0xb9, 0x09, 0x37, 0xd1, 0x84, 0x2a, 0x4c, 0xbf, 0x20, 0x7d, 0x1f, 0x42, 0x83, 0x28, 0x1a,
	0xb4, 0x81, 0xd3, 0x2f, 0xc9, 0x4d, 0x1f, 0xb3, 0xe6, 0xdd, 0x42, 0xf3, 0x36, 0x37, 0xe8, 0x01,
	0xa1, 0x3e, 0xe8, 0x8c, 0xdd, 0x47, 0x63, 0xb7, 0xec, 0x40, 0x9a, 0xe0, 0x3d, 0x72, 0x39, 0x43,
	0x83, 0x6f, 0x47, 0xf5, 0x61, 0x9d, 0x95, 0x30, 0x28, 0xb8, 0x9c, 0x46, 0x53, 0xef, 0x44, 0xf5,
	0xe1, 0x0e, 0x2b, 0x83, 0xf4, 0x33, 0xd2, 0xcb, 0x01, 0x6b, 0xe4, 0xff, 0xa2, 0xfa, 0x30, 0x60,
	0x15, 0xf4, 0xee, 0x23, 0xd2, 0xf1, 0xaf, 0x94, 0xf6, 0x49, 0xbd, 0xe8, 0xda, 0xb0, 0x84, 0x62,
	0x79, 0x8b, 0xf5, 0x66, 0xdb, 0x8e, 0x25, 0x1e, 0xd5, 0x1e, 0x06, 0x83, 0x5f, 0x03, 0x72, 0xe7,
	0x5c, 0xcc, 0xc5, 0xd4, 0x1c, 0x29, 0x2e, 0xa7, 0x3f, 0x7b, 0xdd, 0xe7, 0x6b, 0x72, 0xab, 0x8a,
	0x41, 0x6f, 0xb0, 0x6a, 0xb7, 0x6d, 0xd1, 0xef, 0xc8, 0xed, 0x2a, 0xfc, 0x2a, 0x3f, 0xb6, 0xc5,
	0xb6, 0x6f, 0x0e, 0xfe, 0xda, 0x2d, 0x9e, 0xa0, 0x3c, 0x51, 0x3f, 0x5a, 0xd5, 0xef, 0x93, 0xc6,
	0xb9, 0x29, 0x0a, 0xde, 0x12, 0xf4, 0x31, 0xe9, 0x9c, 0x29, 0x31, 0x4e, 0x65, 0x9c, 0xa0, 0x60,
	0x13, 0xeb, 0xe9, 0xde, 0x46, 0x3d, 0x79, 0xdd, 0x9a, 0x95, 0x24, 0xe8, 0x4f, 0xe0, 0xd4, 0x62,
	0x39, 0x17, 0xc6, 0x53, 0xb3, 0x7b, 0x0d, 0x35, 0x9b, 0x62, 0xf4, 0x29, 0xe9, 0x4f, 0x12, 0x3d,
	0xb5, 0x8d, 0xc6, 0xa9, 0xda, 0xbb, 0x86, 0xaa, 0x0d, 0x29, 0x28, 0xd8, 0xe7, 0xe2, 0xca, 0x5c,
	0x70, 0xfd, 0x46, 0x87, 0x2d, 0x6c, 0x50, 0x05, 0x40, 0xbf, 0x21, 0x7b, 0x90, 0x5a, 0xcf, 0x12,
	0x0d, 0x8d, 0xa5, 0xfe, 0xee, 0x1e, 0x95, 0xb3, 0xd1, 0x4b, 0xf2, 0x09, 0xac, 0x6d, 0x01, 0x08,
	0x63, 0x84, 0x2a, 0xce, 0x47, 0x3d, 0xed, 0x6b, 0xd8, 0xf9, 0x7e, 0x15, 0xf4, 0x47, 0xd2, 0x1d,
	0x73, 0x19, 0x27, 0x31, 0x37, 0x02, 0x75, 0x76, 0xb0, 0x7f, 0xfe, 0xbf, 0xd0, 0x59, 0x49, 0x1e,
	0x56, 0xe6, 0xa7, 0x23, 0xd2, 0x9b, 0x88, 0x69, 0xe2, 0xbd, 0x5b, 0xdd, 0x0f, 0x69, 0xa8, 0x08,
	0x40, 0x17, 0x84, 0x18, 0xe1, 0xf1, 0x3d, 0xdb, 0xd8, 0x33, 0x1a, 0x7a, 0xcf, 0xf9, 0x6a, 0xb9,
	0x4c, 0x95, 0x19, 0xa9, 0xd9, 0x6a, 0x01, 0xce, 0x85, 0x37, 0x90, 0x67, 0x03, 0x07, 0xde, 0xd1,
	0x8c, 0x27, 0x52, 0x7b, 0xbc, 0x7d, 0xcb, 0x5b, 0xc5, 0x21, 0xad, 0x9d, 0x3c, 0x76, 0xbd, 0x06,
	0xcb, 0x48, 0xe8, 0xfe, 0x17, 0xe2, 0x0a, 0x3a, 0x1c, 0x48, 0xe2, 0x1a, 0xba, 0x05, 0x58, 0x74,
	0x7c, 0x25, 0xa6, 0x2b, 0x23, 0x4e, 0xe2, 0x2b, 0x6c, 0x69, 0x0d, 0x56, 0x41, 0xa1, 0xcf, 0x03,
	0x72, 0x12, 0xbb, 0x1e, 0xe6, 0x28, 0xfa, 0x84, 0xf4, 0xfc, 0x46, 0x20, 0x34, 0x76, 0xae, 0xf6,
	0xe1, 0xfd, 0x2c, 0x48, 0xdb, 0xdb, 0x04, 0xab, 0x48, 0x0d, 0xfe, 0x6e, 0x90, 0x4e, 0x16, 0xcf,
	0xa3, 0x34, 0x5e, 0xc3, 0x33, 0x90, 0xd1, 0xf9, 0x5c, 0xe7, 0x21, 0x45, 0xa5, 0xd7, 0xb6, 0x56,
	0x7a, 0xfd, 0x1d, 0x95, 0xbe, 0xf3, 0xde, 0x4a, 0x6f, 0x6c, 0x9d, 0x72, 0xf2, 0x49, 0x17, 0x2b,
	0xde, 0x3e, 0xe0, 0x65, 0x10, 0x4f, 0x50, 0x02, 0x1e, 0x59, 0x1c, 0x4e, 0xe0, 0x04, 0x4b, 0xa2,
	0x1f, 0xb0, 0x14, 0x30, 0xc1, 0xe2, 0x1b, 0x0e, 0x7e, 0xe4, 0x08, 0x8e, 0xc4, 0x86, 0x2b, 0x83,
	0xdb, 0x2d, 0x37, 0x12, 0x67, 0x00, 0xe8, 0x3d, 0x96, 0x31, 0xee, 0xd9, 0x37, 0x3b, 0x23, 0xe1,
	0xe2, 0x32, 0x13, 0x70, 0xc2, 0xb6, 0xaf, 0x77, 0x8b, 0x55, 0x50, 0xfa, 0x43, 0xc1, 0x87, 0x53,
	0xb1, 0x0e, 0x3b, 0xd5, 0x1a, 0xf5, 0x76, 0x59, 0x85, 0x99, 0x9e, 0x10, 0xba, 0x31, 0xe8, 0xeb,
	0xb0, 0x8b, 0x2a, 0x36, 0x0a, 0x21, 0xe7, 0x60, 0x5b, 0x84, 0x7c, 0x55, 0x45, 0x3d, 0x63, 0x59,
	0xbc, 0xb7, 0xa6, 0xb6, 0x08, 0xd1, 0x53, 0xd2, 0x85, 0x59, 0x7a, 0x64, 0x8c, 0x4a, 0x2e, 0x57,
	0x46, 0x60, 0xe1, 0xb4, 0x0f, 0x3f, 0xaf, 0x6a, 0x81, 0x4c, 0x3a, 0x28, 0x71, 0xda, 0xf1, 0xa5,
	0x2c, 0x5d, 0xee, 0x6f, 0xfd, 0x4a, 0x7f, 0xbb, 0xfb, 0x98, 0xd0, 0x4d, 0x15, 0x1f, 0x7a, 0x2e,
	0x5b, 0xfe, 0x73, 0xf9, 0x47, 0x50, 0x24, 0xf7, 0x53, 0xc1, 0x63, 0x1c, 0x1a, 0x79, 0x22, 0x4b,
	0x3f, 0x4a, 0x1e, 0x02, 0xd7, 0xfe, 0x4a, 0x28, 0x28, 0x14, 0xf7, 0xf6, 0x66, 0x24, 0x48, 0x8e,
	0xb4, 0x76, 0x3f, 0x44, 0x2e, 0xcb, 0x3d, 0x04, 0xff, 0xc1, 0x96, 0x42, 0x65, 0xf9, 0xe6, 0x9e,
	0x2e, 0x0f, 0x82, 0xe9, 0x68, 0x9c, 0x4a, 0x2d, 0xa4, 0x5e, 0x69, 0xd7, 0xd7, 0x1a, 0x78, 0x46,
	0x15, 0x1e, 0xfc, 0x1e, 0x90, 0xbd, 0xcc, 0x6c, 0xda, 0x23, 0xb5, 0x24, 0xab, 0xc3, 0x5a, 0x12,
	0xd3, 0x87, 0x65, 0x97, 0xd0, 0xce, 0xf6, 0xe1, 0x7e, 0xf5, 0x06, 0x60, 0x8f, 0x95, 0x9d, 0x7f,
	0x58, 0xae, 0x74, 0x74, 0x62, 0x8b, 0x24, 0xec, 0xb1, 0x12, 0xe7, 0xd1, 0xa7, 0x64, 0x7f, 0x9a,
	0x2e, 0x0e, 0x56, 0x32, 0x99, 0x8b, 0x78, 0x26, 0x94, 0x13, 0x39, 0xea, 0x9e, 0xc1, 0x37, 0x63,
	0xbd, 0xb4, 0x3f, 0xa9, 0xdf, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x48, 0x34, 0x9d, 0x46, 0xbd,
	0x0e, 0x00, 0x00,
}
