// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContractSignature struct {
	OwnerPubkey   string `protobuf:"bytes,1,opt,name=OwnerPubkey" json:"OwnerPubkey"`
	Signature     string `protobuf:"bytes,2,opt,name=Signature" json:"Signature"`
	SignTimestamp string `protobuf:"bytes,3,opt,name=SignTimestamp" json:"SignTimestamp"`
}

func (m *ContractSignature) Reset()                    { *m = ContractSignature{} }
func (m *ContractSignature) String() string            { return proto.CompactTextString(m) }
func (*ContractSignature) ProtoMessage()               {}
func (*ContractSignature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ContractSignature) GetOwnerPubkey() string {
	if m != nil {
		return m.OwnerPubkey
	}
	return ""
}

func (m *ContractSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ContractSignature) GetSignTimestamp() string {
	if m != nil {
		return m.SignTimestamp
	}
	return ""
}

type ContractAsset struct {
	AssetId     string            `protobuf:"bytes,1,opt,name=AssetId" json:"AssetId"`
	Name        string            `protobuf:"bytes,2,opt,name=Name" json:"Name"`
	Caption     string            `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description string            `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	Unit        string            `protobuf:"bytes,5,opt,name=Unit" json:"Unit"`
	Amount      float32           `protobuf:"fixed32,6,opt,name=Amount" json:"Amount"`
	MetaData    map[string]string `protobuf:"bytes,7,rep,name=MetaData" json:"MetaData" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ContractAsset) Reset()                    { *m = ContractAsset{} }
func (m *ContractAsset) String() string            { return proto.CompactTextString(m) }
func (*ContractAsset) ProtoMessage()               {}
func (*ContractAsset) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ContractAsset) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *ContractAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractAsset) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractAsset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractAsset) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *ContractAsset) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ContractAsset) GetMetaData() map[string]string {
	if m != nil {
		return m.MetaData
	}
	return nil
}

type ExpressionResult struct {
	Messsage string `protobuf:"bytes,1,opt,name=Messsage" json:"Messsage"`
	Code     int32  `protobuf:"varint,2,opt,name=Code" json:"Code"`
	Data     string `protobuf:"bytes,3,opt,name=Data" json:"Data"`
	OutPut   string `protobuf:"bytes,4,opt,name=OutPut" json:"OutPut"`
}

func (m *ExpressionResult) Reset()                    { *m = ExpressionResult{} }
func (m *ExpressionResult) String() string            { return proto.CompactTextString(m) }
func (*ExpressionResult) ProtoMessage()               {}
func (*ExpressionResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ExpressionResult) GetMesssage() string {
	if m != nil {
		return m.Messsage
	}
	return ""
}

func (m *ExpressionResult) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ExpressionResult) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ExpressionResult) GetOutPut() string {
	if m != nil {
		return m.OutPut
	}
	return ""
}

type ComponentsExpression struct {
	Cname            string            `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype            string            `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption          string            `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description      string            `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	ExpressionStr    string            `protobuf:"bytes,5,opt,name=ExpressionStr" json:"ExpressionStr"`
	ExpressionResult *ExpressionResult `protobuf:"bytes,6,opt,name=ExpressionResult" json:"ExpressionResult"`
	LogicValue       int32             `protobuf:"varint,7,opt,name=LogicValue" json:"LogicValue"`
}

func (m *ComponentsExpression) Reset()                    { *m = ComponentsExpression{} }
func (m *ComponentsExpression) String() string            { return proto.CompactTextString(m) }
func (*ComponentsExpression) ProtoMessage()               {}
func (*ComponentsExpression) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ComponentsExpression) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ComponentsExpression) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ComponentsExpression) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ComponentsExpression) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComponentsExpression) GetExpressionStr() string {
	if m != nil {
		return m.ExpressionStr
	}
	return ""
}

func (m *ComponentsExpression) GetExpressionResult() *ExpressionResult {
	if m != nil {
		return m.ExpressionResult
	}
	return nil
}

func (m *ComponentsExpression) GetLogicValue() int32 {
	if m != nil {
		return m.LogicValue
	}
	return 0
}

type ComponentDataSub struct {
	Cname        string           `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype        string           `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption      string           `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description  string           `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	ModifyDate   string           `protobuf:"bytes,5,opt,name=ModifyDate" json:"ModifyDate"`
	HardConvType string           `protobuf:"bytes,6,opt,name=HardConvType" json:"HardConvType"`
	Category     []string         `protobuf:"bytes,7,rep,name=Category" json:"Category"`
	Mandatory    bool             `protobuf:"varint,9,opt,name=Mandatory" json:"Mandatory"`
	Unit         string           `protobuf:"bytes,10,opt,name=Unit" json:"Unit"`
	Options      map[string]int32 `protobuf:"bytes,11,rep,name=Options" json:"Options" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Format       string           `protobuf:"bytes,12,opt,name=Format" json:"Format"`
	// Value interface{} int64
	ValueInt int64 `protobuf:"varint,13,opt,name=ValueInt" json:"ValueInt"`
	// Value interface{} unit64
	ValueUint uint64 `protobuf:"varint,14,opt,name=ValueUint" json:"ValueUint"`
	// Value interface{} float64
	ValueFloat float64 `protobuf:"fixed64,15,opt,name=ValueFloat" json:"ValueFloat"`
	// Value interface{} string
	ValueString string `protobuf:"bytes,16,opt,name=ValueString" json:"ValueString"`
	// DefaultValue interface{} int64
	DefaultValueInt int32 `protobuf:"varint,17,opt,name=DefaultValueInt" json:"DefaultValueInt"`
	// DefaultValue interface{} unit64
	DefaultValueUint uint32 `protobuf:"varint,18,opt,name=DefaultValueUint" json:"DefaultValueUint"`
	// DefaultValue interface{} float64
	DefaultValueFloat float64 `protobuf:"fixed64,19,opt,name=DefaultValueFloat" json:"DefaultValueFloat"`
	// DefaultValueinterface{} string
	DefaultValueString string `protobuf:"bytes,20,opt,name=DefaultValueString" json:"DefaultValueString"`
	// DataRange interface{} int64
	DataRangeInt []int32 `protobuf:"varint,21,rep,packed,name=DataRangeInt" json:"DataRangeInt"`
	// DataRange interface{} unit64
	DataRangeUint []uint32 `protobuf:"varint,22,rep,packed,name=DataRangeUint" json:"DataRangeUint"`
	// DataRange interface{} float64
	DataRangeFloat []float64 `protobuf:"fixed64,23,rep,packed,name=DataRangeFloat" json:"DataRangeFloat"`
}

func (m *ComponentDataSub) Reset()                    { *m = ComponentDataSub{} }
func (m *ComponentDataSub) String() string            { return proto.CompactTextString(m) }
func (*ComponentDataSub) ProtoMessage()               {}
func (*ComponentDataSub) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ComponentDataSub) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ComponentDataSub) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ComponentDataSub) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ComponentDataSub) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComponentDataSub) GetModifyDate() string {
	if m != nil {
		return m.ModifyDate
	}
	return ""
}

func (m *ComponentDataSub) GetHardConvType() string {
	if m != nil {
		return m.HardConvType
	}
	return ""
}

func (m *ComponentDataSub) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *ComponentDataSub) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *ComponentDataSub) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *ComponentDataSub) GetOptions() map[string]int32 {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ComponentDataSub) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ComponentDataSub) GetValueInt() int64 {
	if m != nil {
		return m.ValueInt
	}
	return 0
}

func (m *ComponentDataSub) GetValueUint() uint64 {
	if m != nil {
		return m.ValueUint
	}
	return 0
}

func (m *ComponentDataSub) GetValueFloat() float64 {
	if m != nil {
		return m.ValueFloat
	}
	return 0
}

func (m *ComponentDataSub) GetValueString() string {
	if m != nil {
		return m.ValueString
	}
	return ""
}

func (m *ComponentDataSub) GetDefaultValueInt() int32 {
	if m != nil {
		return m.DefaultValueInt
	}
	return 0
}

func (m *ComponentDataSub) GetDefaultValueUint() uint32 {
	if m != nil {
		return m.DefaultValueUint
	}
	return 0
}

func (m *ComponentDataSub) GetDefaultValueFloat() float64 {
	if m != nil {
		return m.DefaultValueFloat
	}
	return 0
}

func (m *ComponentDataSub) GetDefaultValueString() string {
	if m != nil {
		return m.DefaultValueString
	}
	return ""
}

func (m *ComponentDataSub) GetDataRangeInt() []int32 {
	if m != nil {
		return m.DataRangeInt
	}
	return nil
}

func (m *ComponentDataSub) GetDataRangeUint() []uint32 {
	if m != nil {
		return m.DataRangeUint
	}
	return nil
}

func (m *ComponentDataSub) GetDataRangeFloat() []float64 {
	if m != nil {
		return m.DataRangeFloat
	}
	return nil
}

type ComponentData struct {
	Cname        string            `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype        string            `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption      string            `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description  string            `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	ModifyDate   string            `protobuf:"bytes,5,opt,name=ModifyDate" json:"ModifyDate"`
	HardConvType string            `protobuf:"bytes,6,opt,name=HardConvType" json:"HardConvType"`
	Category     []string          `protobuf:"bytes,7,rep,name=Category" json:"Category"`
	Parent       *ComponentDataSub `protobuf:"bytes,8,opt,name=Parent" json:"Parent"`
	Mandatory    bool              `protobuf:"varint,9,opt,name=Mandatory" json:"Mandatory"`
	Unit         string            `protobuf:"bytes,10,opt,name=Unit" json:"Unit"`
	Options      map[string]int32  `protobuf:"bytes,11,rep,name=Options" json:"Options" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Format       string            `protobuf:"bytes,12,opt,name=Format" json:"Format"`
	// Value interface{} int64
	ValueInt int32 `protobuf:"varint,13,opt,name=ValueInt" json:"ValueInt"`
	// Value interface{} unit64
	ValueUint uint32 `protobuf:"varint,14,opt,name=ValueUint" json:"ValueUint"`
	// Value interface{} float64
	ValueFloat float64 `protobuf:"fixed64,15,opt,name=ValueFloat" json:"ValueFloat"`
	// Value interface{} string
	ValueString string `protobuf:"bytes,16,opt,name=ValueString" json:"ValueString"`
	// DefaultValue interface{} int64
	DefaultValueInt int32 `protobuf:"varint,17,opt,name=DefaultValueInt" json:"DefaultValueInt"`
	// DefaultValue interface{} unit64
	DefaultValueUint uint32 `protobuf:"varint,18,opt,name=DefaultValueUint" json:"DefaultValueUint"`
	// DefaultValue interface{} float64
	DefaultValueFloat float64 `protobuf:"fixed64,19,opt,name=DefaultValueFloat" json:"DefaultValueFloat"`
	// DefaultValueinterface{} string
	DefaultValueString string `protobuf:"bytes,20,opt,name=DefaultValueString" json:"DefaultValueString"`
	// DataRange interface{} int64
	DataRangeInt []int32 `protobuf:"varint,21,rep,packed,name=DataRangeInt" json:"DataRangeInt"`
	// DataRange interface{} unit64
	DataRangeUint []uint32 `protobuf:"varint,22,rep,packed,name=DataRangeUint" json:"DataRangeUint"`
	// DataRange interface{} float64
	DataRangeFloat []float64 `protobuf:"fixed64,23,rep,packed,name=DataRangeFloat" json:"DataRangeFloat"`
}

func (m *ComponentData) Reset()                    { *m = ComponentData{} }
func (m *ComponentData) String() string            { return proto.CompactTextString(m) }
func (*ComponentData) ProtoMessage()               {}
func (*ComponentData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ComponentData) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ComponentData) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ComponentData) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ComponentData) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ComponentData) GetModifyDate() string {
	if m != nil {
		return m.ModifyDate
	}
	return ""
}

func (m *ComponentData) GetHardConvType() string {
	if m != nil {
		return m.HardConvType
	}
	return ""
}

func (m *ComponentData) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *ComponentData) GetParent() *ComponentDataSub {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ComponentData) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *ComponentData) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *ComponentData) GetOptions() map[string]int32 {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ComponentData) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *ComponentData) GetValueInt() int32 {
	if m != nil {
		return m.ValueInt
	}
	return 0
}

func (m *ComponentData) GetValueUint() uint32 {
	if m != nil {
		return m.ValueUint
	}
	return 0
}

func (m *ComponentData) GetValueFloat() float64 {
	if m != nil {
		return m.ValueFloat
	}
	return 0
}

func (m *ComponentData) GetValueString() string {
	if m != nil {
		return m.ValueString
	}
	return ""
}

func (m *ComponentData) GetDefaultValueInt() int32 {
	if m != nil {
		return m.DefaultValueInt
	}
	return 0
}

func (m *ComponentData) GetDefaultValueUint() uint32 {
	if m != nil {
		return m.DefaultValueUint
	}
	return 0
}

func (m *ComponentData) GetDefaultValueFloat() float64 {
	if m != nil {
		return m.DefaultValueFloat
	}
	return 0
}

func (m *ComponentData) GetDefaultValueString() string {
	if m != nil {
		return m.DefaultValueString
	}
	return ""
}

func (m *ComponentData) GetDataRangeInt() []int32 {
	if m != nil {
		return m.DataRangeInt
	}
	return nil
}

func (m *ComponentData) GetDataRangeUint() []uint32 {
	if m != nil {
		return m.DataRangeUint
	}
	return nil
}

func (m *ComponentData) GetDataRangeFloat() []float64 {
	if m != nil {
		return m.DataRangeFloat
	}
	return nil
}

type SelectBranchExpression struct {
	BranchExpressionStr   string `protobuf:"bytes,1,opt,name=BranchExpressionStr" json:"BranchExpressionStr"`
	BranchExpressionValue string `protobuf:"bytes,2,opt,name=BranchExpressionValue" json:"BranchExpressionValue"`
}

func (m *SelectBranchExpression) Reset()                    { *m = SelectBranchExpression{} }
func (m *SelectBranchExpression) String() string            { return proto.CompactTextString(m) }
func (*SelectBranchExpression) ProtoMessage()               {}
func (*SelectBranchExpression) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *SelectBranchExpression) GetBranchExpressionStr() string {
	if m != nil {
		return m.BranchExpressionStr
	}
	return ""
}

func (m *SelectBranchExpression) GetBranchExpressionValue() string {
	if m != nil {
		return m.BranchExpressionValue
	}
	return ""
}

type ContractComponentSub struct {
	Cname                         string                  `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype                         string                  `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption                       string                  `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description                   string                  `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	State                         string                  `protobuf:"bytes,5,opt,name=State" json:"State"`
	PreCondition                  []*ComponentsExpression `protobuf:"bytes,6,rep,name=PreCondition" json:"PreCondition"`
	CompleteCondition             []*ComponentsExpression `protobuf:"bytes,7,rep,name=CompleteCondition" json:"CompleteCondition"`
	DiscardCondition              []*ComponentsExpression `protobuf:"bytes,8,rep,name=DiscardCondition" json:"DiscardCondition"`
	NextTasks                     []string                `protobuf:"bytes,9,rep,name=NextTasks" json:"NextTasks"`
	DataList                      []*ComponentData        `protobuf:"bytes,10,rep,name=DataList" json:"DataList"`
	DataValueSetterExpressionList []*ComponentsExpression `protobuf:"bytes,11,rep,name=DataValueSetterExpressionList" json:"DataValueSetterExpressionList"`
	TaskList                      []string                `protobuf:"bytes,14,rep,name=TaskList" json:"TaskList"`
	SupportArguments              []string                `protobuf:"bytes,15,rep,name=SupportArguments" json:"SupportArguments"`
	AgainstArguments              []string                `protobuf:"bytes,16,rep,name=AgainstArguments" json:"AgainstArguments"`
	Support                       int32                   `protobuf:"varint,17,opt,name=Support" json:"Support"`
	Text                          []string                `protobuf:"bytes,18,rep,name=Text" json:"Text"`
	// add date: 2017-05-11 任务执行索引次数 int
	TaskExecuteIdx int32  `protobuf:"varint,19,opt,name=TaskExecuteIdx" json:"TaskExecuteIdx"`
	TaskId         string `protobuf:"bytes,20,opt,name=TaskId" json:"TaskId"`
	// 2017-05-27 17:10:00 add
	SelectBranches []*SelectBranchExpression `protobuf:"bytes,21,rep,name=SelectBranches" json:"SelectBranches"`
}

func (m *ContractComponentSub) Reset()                    { *m = ContractComponentSub{} }
func (m *ContractComponentSub) String() string            { return proto.CompactTextString(m) }
func (*ContractComponentSub) ProtoMessage()               {}
func (*ContractComponentSub) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ContractComponentSub) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ContractComponentSub) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ContractComponentSub) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractComponentSub) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractComponentSub) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ContractComponentSub) GetPreCondition() []*ComponentsExpression {
	if m != nil {
		return m.PreCondition
	}
	return nil
}

func (m *ContractComponentSub) GetCompleteCondition() []*ComponentsExpression {
	if m != nil {
		return m.CompleteCondition
	}
	return nil
}

func (m *ContractComponentSub) GetDiscardCondition() []*ComponentsExpression {
	if m != nil {
		return m.DiscardCondition
	}
	return nil
}

func (m *ContractComponentSub) GetNextTasks() []string {
	if m != nil {
		return m.NextTasks
	}
	return nil
}

func (m *ContractComponentSub) GetDataList() []*ComponentData {
	if m != nil {
		return m.DataList
	}
	return nil
}

func (m *ContractComponentSub) GetDataValueSetterExpressionList() []*ComponentsExpression {
	if m != nil {
		return m.DataValueSetterExpressionList
	}
	return nil
}

func (m *ContractComponentSub) GetTaskList() []string {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ContractComponentSub) GetSupportArguments() []string {
	if m != nil {
		return m.SupportArguments
	}
	return nil
}

func (m *ContractComponentSub) GetAgainstArguments() []string {
	if m != nil {
		return m.AgainstArguments
	}
	return nil
}

func (m *ContractComponentSub) GetSupport() int32 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *ContractComponentSub) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *ContractComponentSub) GetTaskExecuteIdx() int32 {
	if m != nil {
		return m.TaskExecuteIdx
	}
	return 0
}

func (m *ContractComponentSub) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ContractComponentSub) GetSelectBranches() []*SelectBranchExpression {
	if m != nil {
		return m.SelectBranches
	}
	return nil
}

type ContractComponent struct {
	Cname                         string                  `protobuf:"bytes,1,opt,name=Cname" json:"Cname"`
	Ctype                         string                  `protobuf:"bytes,2,opt,name=Ctype" json:"Ctype"`
	Caption                       string                  `protobuf:"bytes,3,opt,name=Caption" json:"Caption"`
	Description                   string                  `protobuf:"bytes,4,opt,name=Description" json:"Description"`
	State                         string                  `protobuf:"bytes,5,opt,name=State" json:"State"`
	PreCondition                  []*ComponentsExpression `protobuf:"bytes,6,rep,name=PreCondition" json:"PreCondition"`
	CompleteCondition             []*ComponentsExpression `protobuf:"bytes,7,rep,name=CompleteCondition" json:"CompleteCondition"`
	DiscardCondition              []*ComponentsExpression `protobuf:"bytes,8,rep,name=DiscardCondition" json:"DiscardCondition"`
	NextTasks                     []string                `protobuf:"bytes,9,rep,name=NextTasks" json:"NextTasks"`
	DataList                      []*ComponentData        `protobuf:"bytes,10,rep,name=DataList" json:"DataList"`
	DataValueSetterExpressionList []*ComponentsExpression `protobuf:"bytes,11,rep,name=DataValueSetterExpressionList" json:"DataValueSetterExpressionList"`
	CandidateList                 *ContractComponentSub   `protobuf:"bytes,12,opt,name=CandidateList" json:"CandidateList"`
	DecisionResult                *ContractComponentSub   `protobuf:"bytes,13,opt,name=DecisionResult" json:"DecisionResult"`
	TaskList                      []string                `protobuf:"bytes,14,rep,name=TaskList" json:"TaskList"`
	SupportArguments              []string                `protobuf:"bytes,15,rep,name=SupportArguments" json:"SupportArguments"`
	AgainstArguments              []string                `protobuf:"bytes,16,rep,name=AgainstArguments" json:"AgainstArguments"`
	Support                       int32                   `protobuf:"varint,17,opt,name=Support" json:"Support"`
	Text                          []string                `protobuf:"bytes,18,rep,name=Text" json:"Text"`
	// add date: 2017-05-11 任务执行索引次数 int
	TaskExecuteIdx int32  `protobuf:"varint,19,opt,name=TaskExecuteIdx" json:"TaskExecuteIdx"`
	TaskId         string `protobuf:"bytes,20,opt,name=TaskId" json:"TaskId"`
	// 2017-05-27 17:10:00 add
	SelectBranches []*SelectBranchExpression `protobuf:"bytes,21,rep,name=SelectBranches" json:"SelectBranches"`
}

func (m *ContractComponent) Reset()                    { *m = ContractComponent{} }
func (m *ContractComponent) String() string            { return proto.CompactTextString(m) }
func (*ContractComponent) ProtoMessage()               {}
func (*ContractComponent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ContractComponent) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ContractComponent) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ContractComponent) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractComponent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractComponent) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ContractComponent) GetPreCondition() []*ComponentsExpression {
	if m != nil {
		return m.PreCondition
	}
	return nil
}

func (m *ContractComponent) GetCompleteCondition() []*ComponentsExpression {
	if m != nil {
		return m.CompleteCondition
	}
	return nil
}

func (m *ContractComponent) GetDiscardCondition() []*ComponentsExpression {
	if m != nil {
		return m.DiscardCondition
	}
	return nil
}

func (m *ContractComponent) GetNextTasks() []string {
	if m != nil {
		return m.NextTasks
	}
	return nil
}

func (m *ContractComponent) GetDataList() []*ComponentData {
	if m != nil {
		return m.DataList
	}
	return nil
}

func (m *ContractComponent) GetDataValueSetterExpressionList() []*ComponentsExpression {
	if m != nil {
		return m.DataValueSetterExpressionList
	}
	return nil
}

func (m *ContractComponent) GetCandidateList() *ContractComponentSub {
	if m != nil {
		return m.CandidateList
	}
	return nil
}

func (m *ContractComponent) GetDecisionResult() *ContractComponentSub {
	if m != nil {
		return m.DecisionResult
	}
	return nil
}

func (m *ContractComponent) GetTaskList() []string {
	if m != nil {
		return m.TaskList
	}
	return nil
}

func (m *ContractComponent) GetSupportArguments() []string {
	if m != nil {
		return m.SupportArguments
	}
	return nil
}

func (m *ContractComponent) GetAgainstArguments() []string {
	if m != nil {
		return m.AgainstArguments
	}
	return nil
}

func (m *ContractComponent) GetSupport() int32 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *ContractComponent) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *ContractComponent) GetTaskExecuteIdx() int32 {
	if m != nil {
		return m.TaskExecuteIdx
	}
	return 0
}

func (m *ContractComponent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *ContractComponent) GetSelectBranches() []*SelectBranchExpression {
	if m != nil {
		return m.SelectBranches
	}
	return nil
}

type ContractBody struct {
	ContractId         string               `protobuf:"bytes,1,opt,name=ContractId" json:"ContractId"`
	Cname              string               `protobuf:"bytes,2,opt,name=Cname" json:"Cname"`
	Ctype              string               `protobuf:"bytes,3,opt,name=Ctype" json:"Ctype"`
	Caption            string               `protobuf:"bytes,4,opt,name=Caption" json:"Caption"`
	Description        string               `protobuf:"bytes,5,opt,name=Description" json:"Description"`
	ContractState      string               `protobuf:"bytes,6,opt,name=ContractState" json:"ContractState"`
	Creator            string               `protobuf:"bytes,7,opt,name=Creator" json:"Creator"`
	CreateTime         string               `protobuf:"bytes,8,opt,name=CreateTime" json:"CreateTime"`
	StartTime          string               `protobuf:"bytes,9,opt,name=StartTime" json:"StartTime"`
	EndTime            string               `protobuf:"bytes,10,opt,name=EndTime" json:"EndTime"`
	ContractOwners     []string             `protobuf:"bytes,11,rep,name=ContractOwners" json:"ContractOwners"`
	ContractAssets     []*ContractAsset     `protobuf:"bytes,12,rep,name=ContractAssets" json:"ContractAssets"`
	ContractSignatures []*ContractSignature `protobuf:"bytes,13,rep,name=ContractSignatures" json:"ContractSignatures"`
	ContractComponents []*ContractComponent `protobuf:"bytes,14,rep,name=ContractComponents" json:"ContractComponents"`
	// add date: 2017-05-11 map[string]interface{} 合约属性MetaData
	//    bytes MetaAttribute = 15;
	MetaAttribute map[string]string `protobuf:"bytes,15,rep,name=MetaAttribute" json:"MetaAttribute" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NextTasks     []string          `protobuf:"bytes,16,rep,name=NextTasks" json:"NextTasks"`
}

func (m *ContractBody) Reset()                    { *m = ContractBody{} }
func (m *ContractBody) String() string            { return proto.CompactTextString(m) }
func (*ContractBody) ProtoMessage()               {}
func (*ContractBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ContractBody) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *ContractBody) GetCname() string {
	if m != nil {
		return m.Cname
	}
	return ""
}

func (m *ContractBody) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *ContractBody) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *ContractBody) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContractBody) GetContractState() string {
	if m != nil {
		return m.ContractState
	}
	return ""
}

func (m *ContractBody) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ContractBody) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *ContractBody) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ContractBody) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ContractBody) GetContractOwners() []string {
	if m != nil {
		return m.ContractOwners
	}
	return nil
}

func (m *ContractBody) GetContractAssets() []*ContractAsset {
	if m != nil {
		return m.ContractAssets
	}
	return nil
}

func (m *ContractBody) GetContractSignatures() []*ContractSignature {
	if m != nil {
		return m.ContractSignatures
	}
	return nil
}

func (m *ContractBody) GetContractComponents() []*ContractComponent {
	if m != nil {
		return m.ContractComponents
	}
	return nil
}

func (m *ContractBody) GetMetaAttribute() map[string]string {
	if m != nil {
		return m.MetaAttribute
	}
	return nil
}

func (m *ContractBody) GetNextTasks() []string {
	if m != nil {
		return m.NextTasks
	}
	return nil
}

type ContractHead struct {
	MainPubkey string `protobuf:"bytes,1,opt,name=MainPubkey" json:"MainPubkey"`
	Version    int32  `protobuf:"varint,2,opt,name=Version" json:"Version"`
	// 指派处理时间 add 2017-05-27 17:10:0
	AssignTime string `protobuf:"bytes,3,opt,name=AssignTime" json:"AssignTime"`
	// add date: 2017-05-11 合约执行时间戳
	// 操作时间,记录状态改变时间, Timestamp修改而来 2017-05-27 17:10:0
	OperateTime string `protobuf:"bytes,4,opt,name=OperateTime" json:"OperateTime"`
	// add date: 2017-06-01 共识结果,是否共识等
	ConsensusResult int32 `protobuf:"varint,5,opt,name=ConsensusResult" json:"ConsensusResult"`
}

func (m *ContractHead) Reset()                    { *m = ContractHead{} }
func (m *ContractHead) String() string            { return proto.CompactTextString(m) }
func (*ContractHead) ProtoMessage()               {}
func (*ContractHead) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ContractHead) GetMainPubkey() string {
	if m != nil {
		return m.MainPubkey
	}
	return ""
}

func (m *ContractHead) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ContractHead) GetAssignTime() string {
	if m != nil {
		return m.AssignTime
	}
	return ""
}

func (m *ContractHead) GetOperateTime() string {
	if m != nil {
		return m.OperateTime
	}
	return ""
}

func (m *ContractHead) GetConsensusResult() int32 {
	if m != nil {
		return m.ConsensusResult
	}
	return 0
}

type Contract struct {
	Id           string        `protobuf:"bytes,1,opt,name=id" json:"id"`
	ContractHead *ContractHead `protobuf:"bytes,2,opt,name=ContractHead" json:"ContractHead"`
	ContractBody *ContractBody `protobuf:"bytes,3,opt,name=ContractBody" json:"ContractBody"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *Contract) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Contract) GetContractHead() *ContractHead {
	if m != nil {
		return m.ContractHead
	}
	return nil
}

func (m *Contract) GetContractBody() *ContractBody {
	if m != nil {
		return m.ContractBody
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractSignature)(nil), "protos.ContractSignature")
	proto.RegisterType((*ContractAsset)(nil), "protos.ContractAsset")
	proto.RegisterType((*ExpressionResult)(nil), "protos.ExpressionResult")
	proto.RegisterType((*ComponentsExpression)(nil), "protos.ComponentsExpression")
	proto.RegisterType((*ComponentDataSub)(nil), "protos.ComponentDataSub")
	proto.RegisterType((*ComponentData)(nil), "protos.ComponentData")
	proto.RegisterType((*SelectBranchExpression)(nil), "protos.SelectBranchExpression")
	proto.RegisterType((*ContractComponentSub)(nil), "protos.ContractComponentSub")
	proto.RegisterType((*ContractComponent)(nil), "protos.ContractComponent")
	proto.RegisterType((*ContractBody)(nil), "protos.ContractBody")
	proto.RegisterType((*ContractHead)(nil), "protos.ContractHead")
	proto.RegisterType((*Contract)(nil), "protos.Contract")
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x8e, 0x1b, 0x35,
	0x14, 0xd6, 0x24, 0x9b, 0xec, 0xc6, 0xf9, 0x69, 0xea, 0x6e, 0xcb, 0xb0, 0x2a, 0x55, 0x14, 0x5a,
	0x88, 0x10, 0x8a, 0xca, 0xc2, 0x45, 0x55, 0x40, 0x6d, 0x36, 0xd9, 0xaa, 0x8b, 0xba, 0xed, 0xca,
	0xd9, 0xf6, 0xde, 0x9b, 0x71, 0xc3, 0xa8, 0x89, 0x27, 0x1a, 0x7b, 0xca, 0xe6, 0x8e, 0x6b, 0x2e,
	0x78, 0x09, 0x5e, 0x81, 0x37, 0xe0, 0x92, 0x3b, 0x2e, 0x79, 0x09, 0x5e, 0x01, 0x9d, 0xe3, 0xf9,
	0xf1, 0x4c, 0x86, 0xb2, 0x50, 0xa9, 0x12, 0x68, 0xaf, 0xe2, 0xf3, 0x9d, 0x1f, 0x9f, 0x39, 0xf6,
	0x77, 0x62, 0x9b, 0x74, 0x66, 0x81, 0xd4, 0x21, 0x9f, 0xe9, 0xe1, 0x2a, 0x0c, 0x74, 0x40, 0xeb,
	0xf8, 0xa3, 0xfa, 0x6b, 0x72, 0x75, 0x1c, 0x6b, 0xa6, 0xfe, 0x5c, 0x72, 0x1d, 0x85, 0x82, 0xf6,
	0x48, 0xf3, 0xd9, 0x77, 0x52, 0x84, 0x27, 0xd1, 0xd9, 0x2b, 0xb1, 0x76, 0x9d, 0x9e, 0x33, 0x68,
	0x30, 0x1b, 0xa2, 0x37, 0x49, 0x23, 0x35, 0x77, 0x2b, 0xa8, 0xcf, 0x00, 0x7a, 0x9b, 0xb4, 0x41,
	0x38, 0xf5, 0x97, 0x42, 0x69, 0xbe, 0x5c, 0xb9, 0x55, 0xb4, 0xc8, 0x83, 0xfd, 0x9f, 0x2a, 0xa4,
	0x9d, 0xcc, 0x3d, 0x52, 0x4a, 0x68, 0xea, 0x92, 0x6d, 0x1c, 0x1c, 0x79, 0xf1, 0x9c, 0x89, 0x48,
	0x29, 0xd9, 0x7a, 0xca, 0x97, 0xc9, 0x54, 0x38, 0x06, 0xeb, 0x31, 0x5f, 0x69, 0x3f, 0x90, 0x71,
	0xfc, 0x44, 0x84, 0xfc, 0x27, 0x42, 0xcd, 0x42, 0xdf, 0x68, 0xb7, 0x4c, 0xfe, 0x16, 0x04, 0xf1,
	0x9e, 0x4b, 0x5f, 0xbb, 0x35, 0x13, 0x0f, 0xc6, 0xf4, 0x06, 0xa9, 0x8f, 0x96, 0x41, 0x24, 0xb5,
	0x5b, 0xef, 0x39, 0x83, 0x0a, 0x8b, 0x25, 0xfa, 0x80, 0xec, 0x1c, 0x0b, 0xcd, 0x27, 0x5c, 0x73,
	0x77, 0xbb, 0x57, 0x1d, 0x34, 0xf7, 0x3f, 0x34, 0x45, 0x54, 0xc3, 0x5c, 0xfa, 0xc3, 0xc4, 0xea,
	0x50, 0xea, 0x70, 0xcd, 0x52, 0xa7, 0xbd, 0x2f, 0x49, 0x3b, 0xa7, 0xa2, 0x5d, 0x52, 0xcd, 0xea,
	0x0a, 0x43, 0xba, 0x4b, 0x6a, 0xaf, 0xf9, 0x22, 0x4a, 0x3e, 0xd0, 0x08, 0xf7, 0x2b, 0xf7, 0x9c,
	0xbe, 0x24, 0xdd, 0xc3, 0xf3, 0x55, 0x28, 0x94, 0xf2, 0x03, 0xc9, 0x84, 0x8a, 0x16, 0x9a, 0xee,
	0x41, 0x46, 0x4a, 0x29, 0x3e, 0x17, 0x71, 0x90, 0x54, 0x86, 0x2f, 0x1b, 0x07, 0x9e, 0x09, 0x54,
	0x63, 0x38, 0x06, 0x0c, 0xb3, 0x37, 0x65, 0xc2, 0x31, 0x7c, 0xed, 0xb3, 0x48, 0x9f, 0x44, 0x3a,
	0x2e, 0x4f, 0x2c, 0xf5, 0x7f, 0xa8, 0x90, 0xdd, 0x71, 0xb0, 0x5c, 0x05, 0x52, 0x48, 0xad, 0xb2,
	0xa9, 0x21, 0xc5, 0xb1, 0x84, 0x35, 0x30, 0x33, 0x1a, 0x01, 0x51, 0xbd, 0x5e, 0xa5, 0x89, 0xa3,
	0xf0, 0x56, 0x4b, 0x73, 0x9b, 0xb4, 0xb3, 0x59, 0xa7, 0x3a, 0x8c, 0xd7, 0x28, 0x0f, 0xd2, 0xc9,
	0x66, 0x59, 0x70, 0xd9, 0x9a, 0xfb, 0x6e, 0xb2, 0x38, 0x45, 0x3d, 0xdb, 0x2c, 0xe4, 0x2d, 0x42,
	0x9e, 0x04, 0x73, 0x7f, 0xf6, 0x02, 0x6b, 0xbf, 0x8d, 0x25, 0xb3, 0x90, 0xfe, 0x2f, 0x75, 0xd2,
	0x4d, 0x8b, 0x01, 0x65, 0x9b, 0x46, 0x67, 0xef, 0xac, 0x10, 0xb7, 0x08, 0x39, 0x0e, 0x3c, 0xff,
	0xe5, 0x7a, 0xc2, 0xb5, 0x88, 0xab, 0x60, 0x21, 0xb4, 0x4f, 0x5a, 0x8f, 0x79, 0xe8, 0x8d, 0x03,
	0xf9, 0xfa, 0x14, 0x26, 0xae, 0xa3, 0x45, 0x0e, 0x83, 0x9d, 0x32, 0xe6, 0x5a, 0xcc, 0x83, 0x70,
	0x8d, 0x7b, 0xb7, 0xc1, 0x52, 0x19, 0x38, 0x7c, 0xcc, 0xa5, 0xc7, 0x35, 0x28, 0x1b, 0x3d, 0x67,
	0xb0, 0xc3, 0x32, 0x20, 0x65, 0x08, 0xb1, 0x18, 0xf2, 0x80, 0x6c, 0x3f, 0xc3, 0xdc, 0x94, 0xdb,
	0x44, 0x22, 0xdc, 0xc9, 0x88, 0x90, 0x2f, 0xd2, 0x30, 0xb6, 0x33, 0x54, 0x48, 0xbc, 0x60, 0xd3,
	0x3d, 0x0a, 0xc2, 0x25, 0xd7, 0x6e, 0xcb, 0x6c, 0x3a, 0x23, 0x41, 0x9a, 0x58, 0xf0, 0x23, 0xa9,
	0xdd, 0x76, 0xcf, 0x19, 0x54, 0x59, 0x2a, 0x43, 0x9a, 0x38, 0x7e, 0xee, 0x4b, 0xed, 0x76, 0x7a,
	0xce, 0x60, 0x8b, 0x65, 0x00, 0x14, 0x09, 0x85, 0x47, 0x8b, 0x80, 0x6b, 0xf7, 0x4a, 0xcf, 0x19,
	0x38, 0xcc, 0x42, 0xa0, 0xcc, 0x28, 0x4d, 0x75, 0xe8, 0xcb, 0xb9, 0xdb, 0x35, 0x65, 0xb6, 0x20,
	0x3a, 0x20, 0x57, 0x26, 0xe2, 0x25, 0x8f, 0x16, 0x3a, 0x4d, 0xe1, 0x2a, 0x6e, 0x84, 0x22, 0x4c,
	0x3f, 0x21, 0x5d, 0x1b, 0xc2, 0x84, 0x68, 0xcf, 0x19, 0xb4, 0xd9, 0x06, 0x4e, 0x3f, 0x25, 0x57,
	0x6d, 0xcc, 0xa4, 0x77, 0x0d, 0xd3, 0xdb, 0x54, 0xd0, 0x21, 0xa1, 0x36, 0x18, 0x27, 0xbb, 0x8b,
	0xc9, 0x96, 0x68, 0x60, 0xe9, 0xa1, 0xd0, 0x8c, 0xcb, 0x39, 0x26, 0x7c, 0xbd, 0x57, 0x1d, 0xd4,
	0x58, 0x0e, 0x03, 0x1e, 0xa5, 0x32, 0xa6, 0x7a, 0xa3, 0x57, 0x1d, 0xb4, 0x59, 0x1e, 0xa4, 0x1f,
	0x91, 0x4e, 0x0a, 0x98, 0x24, 0xdf, 0xeb, 0x55, 0x07, 0x0e, 0x2b, 0xa0, 0x7b, 0xf7, 0x49, 0xcb,
	0x5e, 0xd2, 0xbf, 0x6b, 0x61, 0x35, 0xbb, 0x85, 0xfd, 0x51, 0x87, 0x46, 0x6f, 0x6d, 0x90, 0xff,
	0x0d, 0x85, 0xee, 0x92, 0xfa, 0x09, 0x0f, 0x85, 0xd4, 0xee, 0x4e, 0xbe, 0xf7, 0x14, 0xf9, 0xc0,
	0x62, 0xbb, 0x7f, 0x41, 0xba, 0xaf, 0x8a, 0xa4, 0xeb, 0x97, 0x4e, 0xf2, 0x96, 0x8c, 0xab, 0xbd,
	0x89, 0x71, 0xed, 0x4b, 0xc6, 0xfd, 0xb7, 0x18, 0xf7, 0xbd, 0x43, 0x6e, 0x4c, 0xc5, 0x42, 0xcc,
	0xf4, 0x41, 0xc8, 0xe5, 0xec, 0x5b, 0xeb, 0x6f, 0xfc, 0x2e, 0xb9, 0x56, 0xc4, 0xe0, 0x4f, 0xd6,
	0x84, 0x2d, 0x53, 0xd1, 0x2f, 0xc8, 0xf5, 0x22, 0xfc, 0xc2, 0x3a, 0xab, 0x94, 0x2b, 0xfb, 0xbf,
	0xd6, 0xe1, 0x1c, 0x61, 0x8e, 0x47, 0xe9, 0x46, 0x7d, 0x97, 0x7f, 0x9f, 0xbb, 0xa4, 0x36, 0xd5,
	0x19, 0xed, 0x8d, 0x40, 0x1f, 0x92, 0xd6, 0x49, 0x28, 0xc6, 0x81, 0xf4, 0x7c, 0x74, 0xac, 0x23,
	0xa5, 0x6e, 0x6e, 0x50, 0xca, 0x3a, 0xf9, 0xb0, 0x9c, 0x07, 0xfd, 0x06, 0x4e, 0xcc, 0xcb, 0xd5,
	0x42, 0x68, 0x2b, 0xcc, 0xf6, 0x05, 0xc2, 0x6c, 0xba, 0xd1, 0xc7, 0xa4, 0x3b, 0xf1, 0xd5, 0xcc,
	0xb4, 0x9b, 0x38, 0xd4, 0xce, 0x05, 0x42, 0x6d, 0x78, 0x01, 0x67, 0x9f, 0x8a, 0x73, 0x7d, 0xca,
	0xd5, 0x2b, 0xe5, 0x36, 0xb0, 0x4d, 0x65, 0x00, 0xfd, 0x8c, 0xec, 0xc0, 0xee, 0x7a, 0xe2, 0x2b,
	0xe8, 0x2d, 0x10, 0xff, 0x7a, 0x69, 0x13, 0x61, 0xa9, 0x19, 0x3d, 0x23, 0x1f, 0xc0, 0xd8, 0x70,
	0x40, 0x68, 0x2d, 0xc2, 0x6c, 0x7e, 0x8c, 0xd3, 0xbc, 0x40, 0x9e, 0x6f, 0x0e, 0x01, 0x4d, 0x08,
	0xf2, 0xc3, 0x70, 0x1d, 0xd3, 0x5a, 0x13, 0x19, 0xa8, 0x3f, 0x8d, 0x56, 0xab, 0x20, 0xd4, 0xa3,
	0x70, 0x1e, 0x2d, 0x21, 0xb0, 0x7b, 0x05, 0x6d, 0x36, 0x70, 0xb0, 0x1d, 0xcd, 0xb9, 0x2f, 0x95,
	0x65, 0xdb, 0x35, 0xb6, 0x45, 0x1c, 0xb6, 0x54, 0xec, 0x1f, 0x37, 0x9d, 0x44, 0x84, 0xe6, 0x7b,
	0x2a, 0xce, 0xa1, 0xc1, 0x80, 0x27, 0x8e, 0x81, 0xac, 0x90, 0xd1, 0xe1, 0xb9, 0x98, 0x45, 0x5a,
	0x1c, 0x79, 0xe7, 0xd8, 0x51, 0x6a, 0xac, 0x80, 0x42, 0x9b, 0x05, 0xe4, 0xc8, 0x8b, 0x5b, 0x48,
	0x2c, 0xd1, 0x47, 0xa4, 0x63, 0xf3, 0x50, 0x28, 0x6c, 0x1c, 0xcd, 0xfd, 0x5b, 0x49, 0xd9, 0xca,
	0x59, 0xca, 0x0a, 0x5e, 0xfd, 0xdf, 0xb6, 0xb3, 0x7b, 0x5a, 0x5a, 0xe9, 0x4b, 0x2a, 0x5d, 0x52,
	0x29, 0xa1, 0xd2, 0x01, 0x69, 0x8f, 0xb9, 0xf4, 0x7c, 0x8f, 0x6b, 0x81, 0x31, 0x5b, 0x78, 0x20,
	0xb9, 0x59, 0xbc, 0xa9, 0xda, 0xad, 0x98, 0xe5, 0x5d, 0xe8, 0x84, 0x74, 0x26, 0x62, 0xe6, 0x5b,
	0x37, 0xaa, 0xf6, 0x05, 0x82, 0x14, 0x7c, 0x2e, 0x49, 0x7d, 0x61, 0x52, 0xff, 0x5e, 0x23, 0xad,
	0xa4, 0xa4, 0x07, 0x81, 0xb7, 0x86, 0xa3, 0x55, 0x22, 0xa7, 0x4f, 0x20, 0x16, 0x92, 0xf1, 0xbd,
	0x52, 0xca, 0xf7, 0xea, 0x5f, 0xf0, 0x7d, 0xeb, 0x8d, 0x7c, 0xaf, 0x95, 0x5e, 0xc1, 0xd3, 0x47,
	0x21, 0xe4, 0xbd, 0x39, 0x17, 0xe7, 0x41, 0x9c, 0x21, 0x14, 0x70, 0x70, 0xc5, 0x9b, 0x33, 0xcc,
	0x60, 0x44, 0xfc, 0x0e, 0x18, 0x8a, 0x53, 0x7f, 0x29, 0xf0, 0x68, 0x0c, 0xdf, 0x91, 0x22, 0xf8,
	0x7a, 0xa4, 0x79, 0xa8, 0x51, 0xdd, 0x88, 0x5f, 0x8f, 0x12, 0x00, 0xe2, 0x1e, 0x4a, 0x0f, 0x75,
	0xe6, 0x1c, 0x9c, 0x88, 0xb0, 0x70, 0x49, 0x0a, 0xf8, 0x18, 0x65, 0x4e, 0xc4, 0x0d, 0x56, 0x40,
	0xe9, 0xd7, 0x99, 0x1d, 0xbe, 0xcc, 0x28, 0xb7, 0x55, 0x64, 0xaa, 0xa5, 0x65, 0x05, 0x63, 0x7a,
	0x44, 0xe8, 0xc6, 0x9b, 0x98, 0x72, 0xdb, 0x18, 0xe2, 0xfd, 0x62, 0x88, 0xd4, 0x82, 0x95, 0x38,
	0xd9, 0xa1, 0x32, 0x56, 0x23, 0x2d, 0x4a, 0x42, 0xa5, 0x16, 0xac, 0xc4, 0x89, 0x1e, 0x9b, 0x57,
	0xa4, 0x91, 0xd6, 0xa1, 0x7f, 0x16, 0x69, 0x81, 0xc4, 0x69, 0xee, 0x7f, 0x5c, 0x8c, 0x02, 0x3b,
	0x69, 0x98, 0xb3, 0x34, 0x57, 0x82, 0xbc, 0x77, 0xbe, 0xcb, 0x75, 0x0b, 0x5d, 0x6e, 0xef, 0x21,
	0xa1, 0x9b, 0x21, 0xfe, 0xd1, 0xbb, 0xd5, 0xcf, 0x4e, 0xb6, 0xb9, 0x1f, 0x0b, 0xee, 0xe1, 0x5d,
	0x8c, 0xfb, 0x32, 0xf7, 0xa6, 0x68, 0x21, 0xb0, 0xec, 0x2f, 0x44, 0x08, 0x44, 0x89, 0xcf, 0xb3,
	0x89, 0x08, 0x9e, 0x23, 0xa5, 0xe2, 0xb7, 0xc3, 0x78, 0x97, 0x5b, 0x08, 0x3e, 0x57, 0xae, 0x44,
	0x98, 0xec, 0xb7, 0xf8, 0x0f, 0xcc, 0x82, 0xe0, 0xc6, 0x31, 0x0e, 0xa4, 0x12, 0x52, 0x45, 0x2a,
	0x6e, 0x6d, 0x35, 0x73, 0xe3, 0x28, 0xc0, 0xfd, 0x1f, 0x1d, 0xb2, 0x93, 0xa4, 0x4d, 0x3b, 0xa4,
	0xe2, 0x27, 0x3c, 0xac, 0xf8, 0x1e, 0xbd, 0x97, 0xff, 0x24, 0xcc, 0xb3, 0xb9, 0xbf, 0x5b, 0x5c,
	0x01, 0xd0, 0xb1, 0xfc, 0xc7, 0xdf, 0xcb, 0x33, 0x1d, 0x3f, 0xa2, 0xc4, 0x13, 0x74, 0x2c, 0x67,
	0x79, 0x70, 0x87, 0xec, 0xce, 0x82, 0xe5, 0x30, 0x92, 0xfe, 0x42, 0x78, 0x73, 0x11, 0xc6, 0x2e,
	0x07, 0xed, 0x13, 0xf8, 0x4d, 0x4c, 0xcf, 0xcc, 0x7b, 0xee, 0xe7, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x9c, 0xfb, 0xaa, 0xf0, 0xe8, 0x15, 0x00, 0x00,
}
