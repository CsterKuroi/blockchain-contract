/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.protos.ComponentData');
goog.provide('proto.protos.ComponentDataSub');
goog.provide('proto.protos.ComponentsExpression');
goog.provide('proto.protos.Contract');
goog.provide('proto.protos.ContractAsset');
goog.provide('proto.protos.ContractBody');
goog.provide('proto.protos.ContractComponent');
goog.provide('proto.protos.ContractComponentSub');
goog.provide('proto.protos.ContractExecuteLog');
goog.provide('proto.protos.ContractExecuteLogList');
goog.provide('proto.protos.ContractHead');
goog.provide('proto.protos.ContractList');
goog.provide('proto.protos.ContractSignature');
goog.provide('proto.protos.ExpressionResult');
goog.provide('proto.protos.ResponseData');
goog.provide('proto.protos.SelectBranchExpression');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ContractSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractSignature.displayName = 'proto.protos.ContractSignature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractSignature} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerpubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signtimestamp: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractSignature}
 */
proto.protos.ContractSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractSignature;
  return proto.protos.ContractSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractSignature}
 */
proto.protos.ContractSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerpubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigntimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractSignature} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerpubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSigntimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string OwnerPubkey = 1;
 * @return {string}
 */
proto.protos.ContractSignature.prototype.getOwnerpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractSignature.prototype.setOwnerpubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Signature = 2;
 * @return {string}
 */
proto.protos.ContractSignature.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ContractSignature.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string SignTimestamp = 3;
 * @return {string}
 */
proto.protos.ContractSignature.prototype.getSigntimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractSignature.prototype.setSigntimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ContractAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractAsset.displayName = 'proto.protos.ContractAsset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractAsset} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractAsset}
 */
proto.protos.ContractAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractAsset;
  return proto.protos.ContractAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractAsset}
 */
proto.protos.ContractAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 7:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractAsset} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string AssetId = 1;
 * @return {string}
 */
proto.protos.ContractAsset.prototype.getAssetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractAsset.prototype.setAssetid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.protos.ContractAsset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ContractAsset.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Caption = 3;
 * @return {string}
 */
proto.protos.ContractAsset.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractAsset.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.protos.ContractAsset.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ContractAsset.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Unit = 5;
 * @return {string}
 */
proto.protos.ContractAsset.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ContractAsset.prototype.setUnit = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float Amount = 6;
 * @return {number}
 */
proto.protos.ContractAsset.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.protos.ContractAsset.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * map<string, string> MetaData = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.ContractAsset.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


proto.protos.ContractAsset.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ExpressionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ExpressionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ExpressionResult.displayName = 'proto.protos.ExpressionResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ExpressionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ExpressionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ExpressionResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ExpressionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: jspb.Message.getFieldWithDefault(msg, 3, ""),
    output: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ExpressionResult}
 */
proto.protos.ExpressionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ExpressionResult;
  return proto.protos.ExpressionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ExpressionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ExpressionResult}
 */
proto.protos.ExpressionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ExpressionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ExpressionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ExpressionResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ExpressionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.protos.ExpressionResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ExpressionResult.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 Code = 2;
 * @return {number}
 */
proto.protos.ExpressionResult.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protos.ExpressionResult.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Data = 3;
 * @return {string}
 */
proto.protos.ExpressionResult.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ExpressionResult.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string OutPut = 4;
 * @return {string}
 */
proto.protos.ExpressionResult.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ExpressionResult.prototype.setOutput = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ComponentsExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ComponentsExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ComponentsExpression.displayName = 'proto.protos.ComponentsExpression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ComponentsExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ComponentsExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ComponentsExpression} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ComponentsExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    cname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    expressionstr: jspb.Message.getFieldWithDefault(msg, 5, ""),
    expressionresult: (f = msg.getExpressionresult()) && proto.protos.ExpressionResult.toObject(includeInstance, f),
    logicvalue: jspb.Message.getFieldWithDefault(msg, 7, 0),
    metaattributeMap: (f = msg.getMetaattributeMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ComponentsExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ComponentsExpression;
  return proto.protos.ComponentsExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ComponentsExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ComponentsExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpressionstr(value);
      break;
    case 6:
      var value = new proto.protos.ExpressionResult;
      reader.readMessage(value,proto.protos.ExpressionResult.deserializeBinaryFromReader);
      msg.setExpressionresult(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLogicvalue(value);
      break;
    case 8:
      var value = msg.getMetaattributeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ComponentsExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ComponentsExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ComponentsExpression} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ComponentsExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExpressionstr();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExpressionresult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protos.ExpressionResult.serializeBinaryToWriter
    );
  }
  f = message.getLogicvalue();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMetaattributeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string Cname = 1;
 * @return {string}
 */
proto.protos.ComponentsExpression.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ComponentsExpression.prototype.setCname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Ctype = 2;
 * @return {string}
 */
proto.protos.ComponentsExpression.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ComponentsExpression.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Caption = 3;
 * @return {string}
 */
proto.protos.ComponentsExpression.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ComponentsExpression.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.protos.ComponentsExpression.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ComponentsExpression.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ExpressionStr = 5;
 * @return {string}
 */
proto.protos.ComponentsExpression.prototype.getExpressionstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ComponentsExpression.prototype.setExpressionstr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional ExpressionResult ExpressionResult = 6;
 * @return {?proto.protos.ExpressionResult}
 */
proto.protos.ComponentsExpression.prototype.getExpressionresult = function() {
  return /** @type{?proto.protos.ExpressionResult} */ (
    jspb.Message.getWrapperField(this, proto.protos.ExpressionResult, 6));
};


/** @param {?proto.protos.ExpressionResult|undefined} value */
proto.protos.ComponentsExpression.prototype.setExpressionresult = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.protos.ComponentsExpression.prototype.clearExpressionresult = function() {
  this.setExpressionresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ComponentsExpression.prototype.hasExpressionresult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 LogicValue = 7;
 * @return {number}
 */
proto.protos.ComponentsExpression.prototype.getLogicvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protos.ComponentsExpression.prototype.setLogicvalue = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * map<string, string> MetaAttribute = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.ComponentsExpression.prototype.getMetaattributeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


proto.protos.ComponentsExpression.prototype.clearMetaattributeMap = function() {
  this.getMetaattributeMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ComponentDataSub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ComponentDataSub.repeatedFields_, null);
};
goog.inherits(proto.protos.ComponentDataSub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ComponentDataSub.displayName = 'proto.protos.ComponentDataSub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ComponentDataSub.repeatedFields_ = [7,21,22,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ComponentDataSub.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ComponentDataSub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ComponentDataSub} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ComponentDataSub.toObject = function(includeInstance, msg) {
  var f, obj = {
    cname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    modifydate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hardconvtype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    categoryList: jspb.Message.getField(msg, 7),
    mandatory: jspb.Message.getFieldWithDefault(msg, 9, false),
    unit: jspb.Message.getFieldWithDefault(msg, 10, ""),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : [],
    format: jspb.Message.getFieldWithDefault(msg, 12, ""),
    valueint: jspb.Message.getFieldWithDefault(msg, 13, 0),
    valueuint: jspb.Message.getFieldWithDefault(msg, 14, 0),
    valuefloat: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    valuestring: jspb.Message.getFieldWithDefault(msg, 16, ""),
    defaultvalueint: jspb.Message.getFieldWithDefault(msg, 17, 0),
    defaultvalueuint: jspb.Message.getFieldWithDefault(msg, 18, 0),
    defaultvaluefloat: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    defaultvaluestring: jspb.Message.getFieldWithDefault(msg, 20, ""),
    datarangeintList: jspb.Message.getField(msg, 21),
    datarangeuintList: jspb.Message.getField(msg, 22),
    datarangefloatList: jspb.Message.getRepeatedFloatingPointField(msg, 23)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ComponentDataSub}
 */
proto.protos.ComponentDataSub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ComponentDataSub;
  return proto.protos.ComponentDataSub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ComponentDataSub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ComponentDataSub}
 */
proto.protos.ComponentDataSub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModifydate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardconvtype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategory(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMandatory(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 11:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32);
         });
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValueint(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValueuint(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValuefloat(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuestring(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultvalueint(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultvalueuint(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultvaluefloat(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultvaluestring(value);
      break;
    case 21:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setDatarangeintList(value);
      break;
    case 22:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDatarangeuintList(value);
      break;
    case 23:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDatarangefloatList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ComponentDataSub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ComponentDataSub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ComponentDataSub} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ComponentDataSub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getModifydate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHardconvtype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getMandatory();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getValueint();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getValueuint();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getValuefloat();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getValuestring();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getDefaultvalueint();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getDefaultvalueuint();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getDefaultvaluefloat();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getDefaultvaluestring();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getDatarangeintList();
  if (f.length > 0) {
    writer.writePackedInt32(
      21,
      f
    );
  }
  f = message.getDatarangeuintList();
  if (f.length > 0) {
    writer.writePackedUint32(
      22,
      f
    );
  }
  f = message.getDatarangefloatList();
  if (f.length > 0) {
    writer.writePackedDouble(
      23,
      f
    );
  }
};


/**
 * optional string Cname = 1;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setCname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Ctype = 2;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Caption = 3;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ModifyDate = 5;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getModifydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setModifydate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string HardConvType = 6;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getHardconvtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setHardconvtype = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated string Category = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ComponentDataSub.prototype.getCategoryList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<string>} value */
proto.protos.ComponentDataSub.prototype.setCategoryList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ComponentDataSub.prototype.addCategory = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.protos.ComponentDataSub.prototype.clearCategoryList = function() {
  this.setCategoryList([]);
};


/**
 * optional bool Mandatory = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protos.ComponentDataSub.prototype.getMandatory = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.protos.ComponentDataSub.prototype.setMandatory = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string Unit = 10;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setUnit = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * map<string, int32> Options = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.protos.ComponentDataSub.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.protos.ComponentDataSub.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
};


/**
 * optional string Format = 12;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 ValueInt = 13;
 * @return {number}
 */
proto.protos.ComponentDataSub.prototype.getValueint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protos.ComponentDataSub.prototype.setValueint = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional uint32 ValueUint = 14;
 * @return {number}
 */
proto.protos.ComponentDataSub.prototype.getValueuint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protos.ComponentDataSub.prototype.setValueuint = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional double ValueFloat = 15;
 * @return {number}
 */
proto.protos.ComponentDataSub.prototype.getValuefloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.protos.ComponentDataSub.prototype.setValuefloat = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string ValueString = 16;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getValuestring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setValuestring = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 DefaultValueInt = 17;
 * @return {number}
 */
proto.protos.ComponentDataSub.prototype.getDefaultvalueint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protos.ComponentDataSub.prototype.setDefaultvalueint = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional uint32 DefaultValueUint = 18;
 * @return {number}
 */
proto.protos.ComponentDataSub.prototype.getDefaultvalueuint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.protos.ComponentDataSub.prototype.setDefaultvalueuint = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional double DefaultValueFloat = 19;
 * @return {number}
 */
proto.protos.ComponentDataSub.prototype.getDefaultvaluefloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.protos.ComponentDataSub.prototype.setDefaultvaluefloat = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string DefaultValueString = 20;
 * @return {string}
 */
proto.protos.ComponentDataSub.prototype.getDefaultvaluestring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.protos.ComponentDataSub.prototype.setDefaultvaluestring = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * repeated int32 DataRangeInt = 21;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protos.ComponentDataSub.prototype.getDatarangeintList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 21));
};


/** @param {!Array.<number>} value */
proto.protos.ComponentDataSub.prototype.setDatarangeintList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protos.ComponentDataSub.prototype.addDatarangeint = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.protos.ComponentDataSub.prototype.clearDatarangeintList = function() {
  this.setDatarangeintList([]);
};


/**
 * repeated uint32 DataRangeUint = 22;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protos.ComponentDataSub.prototype.getDatarangeuintList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 22));
};


/** @param {!Array.<number>} value */
proto.protos.ComponentDataSub.prototype.setDatarangeuintList = function(value) {
  jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protos.ComponentDataSub.prototype.addDatarangeuint = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


proto.protos.ComponentDataSub.prototype.clearDatarangeuintList = function() {
  this.setDatarangeuintList([]);
};


/**
 * repeated double DataRangeFloat = 23;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protos.ComponentDataSub.prototype.getDatarangefloatList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 23));
};


/** @param {!Array.<number>} value */
proto.protos.ComponentDataSub.prototype.setDatarangefloatList = function(value) {
  jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protos.ComponentDataSub.prototype.addDatarangefloat = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


proto.protos.ComponentDataSub.prototype.clearDatarangefloatList = function() {
  this.setDatarangefloatList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ComponentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ComponentData.repeatedFields_, null);
};
goog.inherits(proto.protos.ComponentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ComponentData.displayName = 'proto.protos.ComponentData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ComponentData.repeatedFields_ = [7,21,22,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ComponentData.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ComponentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ComponentData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ComponentData.toObject = function(includeInstance, msg) {
  var f, obj = {
    cname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    modifydate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hardconvtype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    categoryList: jspb.Message.getField(msg, 7),
    parent: (f = msg.getParent()) && proto.protos.ComponentDataSub.toObject(includeInstance, f),
    mandatory: jspb.Message.getFieldWithDefault(msg, 9, false),
    unit: jspb.Message.getFieldWithDefault(msg, 10, ""),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : [],
    format: jspb.Message.getFieldWithDefault(msg, 12, ""),
    valueint: jspb.Message.getFieldWithDefault(msg, 13, 0),
    valueuint: jspb.Message.getFieldWithDefault(msg, 14, 0),
    valuefloat: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    valuestring: jspb.Message.getFieldWithDefault(msg, 16, ""),
    defaultvalueint: jspb.Message.getFieldWithDefault(msg, 17, 0),
    defaultvalueuint: jspb.Message.getFieldWithDefault(msg, 18, 0),
    defaultvaluefloat: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    defaultvaluestring: jspb.Message.getFieldWithDefault(msg, 20, ""),
    datarangeintList: jspb.Message.getField(msg, 21),
    datarangeuintList: jspb.Message.getField(msg, 22),
    datarangefloatList: jspb.Message.getRepeatedFloatingPointField(msg, 23),
    value: jspb.Message.getFieldWithDefault(msg, 24, ""),
    defaultvalue: jspb.Message.getFieldWithDefault(msg, 25, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ComponentData}
 */
proto.protos.ComponentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ComponentData;
  return proto.protos.ComponentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ComponentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ComponentData}
 */
proto.protos.ComponentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModifydate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHardconvtype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategory(value);
      break;
    case 8:
      var value = new proto.protos.ComponentDataSub;
      reader.readMessage(value,proto.protos.ComponentDataSub.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMandatory(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 11:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32);
         });
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormat(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValueint(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setValueuint(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValuefloat(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuestring(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefaultvalueint(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefaultvalueuint(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDefaultvaluefloat(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultvaluestring(value);
      break;
    case 21:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setDatarangeintList(value);
      break;
    case 22:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setDatarangeuintList(value);
      break;
    case 23:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDatarangefloatList(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ComponentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ComponentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ComponentData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ComponentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getModifydate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHardconvtype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.protos.ComponentDataSub.serializeBinaryToWriter
    );
  }
  f = message.getMandatory();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getFormat();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getValueint();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getValueuint();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getValuefloat();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getValuestring();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getDefaultvalueint();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getDefaultvalueuint();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getDefaultvaluefloat();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getDefaultvaluestring();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getDatarangeintList();
  if (f.length > 0) {
    writer.writePackedInt32(
      21,
      f
    );
  }
  f = message.getDatarangeuintList();
  if (f.length > 0) {
    writer.writePackedUint32(
      22,
      f
    );
  }
  f = message.getDatarangefloatList();
  if (f.length > 0) {
    writer.writePackedDouble(
      23,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getDefaultvalue();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
};


/**
 * optional string Cname = 1;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setCname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Ctype = 2;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Caption = 3;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ModifyDate = 5;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getModifydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setModifydate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string HardConvType = 6;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getHardconvtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setHardconvtype = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated string Category = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ComponentData.prototype.getCategoryList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<string>} value */
proto.protos.ComponentData.prototype.setCategoryList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ComponentData.prototype.addCategory = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.protos.ComponentData.prototype.clearCategoryList = function() {
  this.setCategoryList([]);
};


/**
 * optional ComponentDataSub Parent = 8;
 * @return {?proto.protos.ComponentDataSub}
 */
proto.protos.ComponentData.prototype.getParent = function() {
  return /** @type{?proto.protos.ComponentDataSub} */ (
    jspb.Message.getWrapperField(this, proto.protos.ComponentDataSub, 8));
};


/** @param {?proto.protos.ComponentDataSub|undefined} value */
proto.protos.ComponentData.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.protos.ComponentData.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.ComponentData.prototype.hasParent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool Mandatory = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protos.ComponentData.prototype.getMandatory = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.protos.ComponentData.prototype.setMandatory = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string Unit = 10;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setUnit = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * map<string, int32> Options = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.protos.ComponentData.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


proto.protos.ComponentData.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
};


/**
 * optional string Format = 12;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setFormat = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 ValueInt = 13;
 * @return {number}
 */
proto.protos.ComponentData.prototype.getValueint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protos.ComponentData.prototype.setValueint = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional uint32 ValueUint = 14;
 * @return {number}
 */
proto.protos.ComponentData.prototype.getValueuint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protos.ComponentData.prototype.setValueuint = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional double ValueFloat = 15;
 * @return {number}
 */
proto.protos.ComponentData.prototype.getValuefloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.protos.ComponentData.prototype.setValuefloat = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string ValueString = 16;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getValuestring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setValuestring = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 DefaultValueInt = 17;
 * @return {number}
 */
proto.protos.ComponentData.prototype.getDefaultvalueint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protos.ComponentData.prototype.setDefaultvalueint = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional uint32 DefaultValueUint = 18;
 * @return {number}
 */
proto.protos.ComponentData.prototype.getDefaultvalueuint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.protos.ComponentData.prototype.setDefaultvalueuint = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional double DefaultValueFloat = 19;
 * @return {number}
 */
proto.protos.ComponentData.prototype.getDefaultvaluefloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.protos.ComponentData.prototype.setDefaultvaluefloat = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string DefaultValueString = 20;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getDefaultvaluestring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setDefaultvaluestring = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * repeated int32 DataRangeInt = 21;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protos.ComponentData.prototype.getDatarangeintList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 21));
};


/** @param {!Array.<number>} value */
proto.protos.ComponentData.prototype.setDatarangeintList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protos.ComponentData.prototype.addDatarangeint = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.protos.ComponentData.prototype.clearDatarangeintList = function() {
  this.setDatarangeintList([]);
};


/**
 * repeated uint32 DataRangeUint = 22;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protos.ComponentData.prototype.getDatarangeuintList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 22));
};


/** @param {!Array.<number>} value */
proto.protos.ComponentData.prototype.setDatarangeuintList = function(value) {
  jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protos.ComponentData.prototype.addDatarangeuint = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


proto.protos.ComponentData.prototype.clearDatarangeuintList = function() {
  this.setDatarangeuintList([]);
};


/**
 * repeated double DataRangeFloat = 23;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.protos.ComponentData.prototype.getDatarangefloatList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 23));
};


/** @param {!Array.<number>} value */
proto.protos.ComponentData.prototype.setDatarangefloatList = function(value) {
  jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.protos.ComponentData.prototype.addDatarangefloat = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


proto.protos.ComponentData.prototype.clearDatarangefloatList = function() {
  this.setDatarangefloatList([]);
};


/**
 * optional string Value = 24;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setValue = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional string DefaultValue = 25;
 * @return {string}
 */
proto.protos.ComponentData.prototype.getDefaultvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.protos.ComponentData.prototype.setDefaultvalue = function(value) {
  jspb.Message.setField(this, 25, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.SelectBranchExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.SelectBranchExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.SelectBranchExpression.displayName = 'proto.protos.SelectBranchExpression';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.SelectBranchExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.SelectBranchExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.SelectBranchExpression} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.SelectBranchExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    branchexpressionstr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    branchexpressionvalue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.SelectBranchExpression}
 */
proto.protos.SelectBranchExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.SelectBranchExpression;
  return proto.protos.SelectBranchExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.SelectBranchExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.SelectBranchExpression}
 */
proto.protos.SelectBranchExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranchexpressionstr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranchexpressionvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.SelectBranchExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.SelectBranchExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.SelectBranchExpression} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.SelectBranchExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBranchexpressionstr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBranchexpressionvalue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string BranchExpressionStr = 1;
 * @return {string}
 */
proto.protos.SelectBranchExpression.prototype.getBranchexpressionstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.SelectBranchExpression.prototype.setBranchexpressionstr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string BranchExpressionValue = 2;
 * @return {string}
 */
proto.protos.SelectBranchExpression.prototype.getBranchexpressionvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.SelectBranchExpression.prototype.setBranchexpressionvalue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractComponentSub = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ContractComponentSub.repeatedFields_, null);
};
goog.inherits(proto.protos.ContractComponentSub, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractComponentSub.displayName = 'proto.protos.ContractComponentSub';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ContractComponentSub.repeatedFields_ = [6,7,8,9,10,11,14,15,16,18,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractComponentSub.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractComponentSub.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractComponentSub} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractComponentSub.toObject = function(includeInstance, msg) {
  var f, obj = {
    cname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    state: jspb.Message.getFieldWithDefault(msg, 5, ""),
    preconditionList: jspb.Message.toObjectList(msg.getPreconditionList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    completeconditionList: jspb.Message.toObjectList(msg.getCompleteconditionList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    discardconditionList: jspb.Message.toObjectList(msg.getDiscardconditionList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    nexttasksList: jspb.Message.getField(msg, 9),
    datalistList: jspb.Message.toObjectList(msg.getDatalistList(),
    proto.protos.ComponentData.toObject, includeInstance),
    datavaluesetterexpressionlistList: jspb.Message.toObjectList(msg.getDatavaluesetterexpressionlistList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    tasklistList: jspb.Message.getField(msg, 14),
    supportargumentsList: jspb.Message.getField(msg, 15),
    againstargumentsList: jspb.Message.getField(msg, 16),
    support: jspb.Message.getFieldWithDefault(msg, 17, 0),
    textList: jspb.Message.getField(msg, 18),
    taskexecuteidx: jspb.Message.getFieldWithDefault(msg, 19, 0),
    taskid: jspb.Message.getFieldWithDefault(msg, 20, ""),
    selectbranchesList: jspb.Message.toObjectList(msg.getSelectbranchesList(),
    proto.protos.SelectBranchExpression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractComponentSub}
 */
proto.protos.ContractComponentSub.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractComponentSub;
  return proto.protos.ContractComponentSub.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractComponentSub} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractComponentSub}
 */
proto.protos.ContractComponentSub.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 6:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addPrecondition(value);
      break;
    case 7:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addCompletecondition(value);
      break;
    case 8:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addDiscardcondition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addNexttasks(value);
      break;
    case 10:
      var value = new proto.protos.ComponentData;
      reader.readMessage(value,proto.protos.ComponentData.deserializeBinaryFromReader);
      msg.addDatalist(value);
      break;
    case 11:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addDatavaluesetterexpressionlist(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addTasklist(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportarguments(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addAgainstarguments(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSupport(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addText(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskexecuteidx(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskid(value);
      break;
    case 21:
      var value = new proto.protos.SelectBranchExpression;
      reader.readMessage(value,proto.protos.SelectBranchExpression.deserializeBinaryFromReader);
      msg.addSelectbranches(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractComponentSub.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractComponentSub.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractComponentSub} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractComponentSub.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPreconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getCompleteconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getDiscardconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getNexttasksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getDatalistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.protos.ComponentData.serializeBinaryToWriter
    );
  }
  f = message.getDatavaluesetterexpressionlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getTasklistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getSupportargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getAgainstargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getSupport();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getTextList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getTaskexecuteidx();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getTaskid();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getSelectbranchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.protos.SelectBranchExpression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Cname = 1;
 * @return {string}
 */
proto.protos.ContractComponentSub.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractComponentSub.prototype.setCname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Ctype = 2;
 * @return {string}
 */
proto.protos.ContractComponentSub.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ContractComponentSub.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Caption = 3;
 * @return {string}
 */
proto.protos.ContractComponentSub.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractComponentSub.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.protos.ContractComponentSub.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ContractComponentSub.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string State = 5;
 * @return {string}
 */
proto.protos.ContractComponentSub.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ContractComponentSub.prototype.setState = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated ComponentsExpression PreCondition = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponentSub.prototype.getPreconditionList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 6));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponentSub.prototype.setPreconditionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponentSub.prototype.addPrecondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearPreconditionList = function() {
  this.setPreconditionList([]);
};


/**
 * repeated ComponentsExpression CompleteCondition = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponentSub.prototype.getCompleteconditionList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 7));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponentSub.prototype.setCompleteconditionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponentSub.prototype.addCompletecondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearCompleteconditionList = function() {
  this.setCompleteconditionList([]);
};


/**
 * repeated ComponentsExpression DiscardCondition = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponentSub.prototype.getDiscardconditionList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 8));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponentSub.prototype.setDiscardconditionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponentSub.prototype.addDiscardcondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearDiscardconditionList = function() {
  this.setDiscardconditionList([]);
};


/**
 * repeated string NextTasks = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponentSub.prototype.getNexttasksList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 9));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponentSub.prototype.setNexttasksList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponentSub.prototype.addNexttasks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearNexttasksList = function() {
  this.setNexttasksList([]);
};


/**
 * repeated ComponentData DataList = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentData>}
 */
proto.protos.ContractComponentSub.prototype.getDatalistList = function() {
  return /** @type{!Array.<!proto.protos.ComponentData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentData, 10));
};


/** @param {!Array.<!proto.protos.ComponentData>} value */
proto.protos.ContractComponentSub.prototype.setDatalistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.protos.ComponentData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentData}
 */
proto.protos.ContractComponentSub.prototype.addDatalist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.protos.ComponentData, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearDatalistList = function() {
  this.setDatalistList([]);
};


/**
 * repeated ComponentsExpression DataValueSetterExpressionList = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponentSub.prototype.getDatavaluesetterexpressionlistList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 11));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponentSub.prototype.setDatavaluesetterexpressionlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponentSub.prototype.addDatavaluesetterexpressionlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearDatavaluesetterexpressionlistList = function() {
  this.setDatavaluesetterexpressionlistList([]);
};


/**
 * repeated string TaskList = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponentSub.prototype.getTasklistList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 14));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponentSub.prototype.setTasklistList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponentSub.prototype.addTasklist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearTasklistList = function() {
  this.setTasklistList([]);
};


/**
 * repeated string SupportArguments = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponentSub.prototype.getSupportargumentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 15));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponentSub.prototype.setSupportargumentsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponentSub.prototype.addSupportarguments = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearSupportargumentsList = function() {
  this.setSupportargumentsList([]);
};


/**
 * repeated string AgainstArguments = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponentSub.prototype.getAgainstargumentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 16));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponentSub.prototype.setAgainstargumentsList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponentSub.prototype.addAgainstarguments = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearAgainstargumentsList = function() {
  this.setAgainstargumentsList([]);
};


/**
 * optional int32 Support = 17;
 * @return {number}
 */
proto.protos.ContractComponentSub.prototype.getSupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protos.ContractComponentSub.prototype.setSupport = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * repeated string Text = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponentSub.prototype.getTextList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 18));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponentSub.prototype.setTextList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponentSub.prototype.addText = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearTextList = function() {
  this.setTextList([]);
};


/**
 * optional int32 TaskExecuteIdx = 19;
 * @return {number}
 */
proto.protos.ContractComponentSub.prototype.getTaskexecuteidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protos.ContractComponentSub.prototype.setTaskexecuteidx = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string TaskId = 20;
 * @return {string}
 */
proto.protos.ContractComponentSub.prototype.getTaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.protos.ContractComponentSub.prototype.setTaskid = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * repeated SelectBranchExpression SelectBranches = 21;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.SelectBranchExpression>}
 */
proto.protos.ContractComponentSub.prototype.getSelectbranchesList = function() {
  return /** @type{!Array.<!proto.protos.SelectBranchExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.SelectBranchExpression, 21));
};


/** @param {!Array.<!proto.protos.SelectBranchExpression>} value */
proto.protos.ContractComponentSub.prototype.setSelectbranchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.protos.SelectBranchExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.SelectBranchExpression}
 */
proto.protos.ContractComponentSub.prototype.addSelectbranches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.protos.SelectBranchExpression, opt_index);
};


proto.protos.ContractComponentSub.prototype.clearSelectbranchesList = function() {
  this.setSelectbranchesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractComponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ContractComponent.repeatedFields_, null);
};
goog.inherits(proto.protos.ContractComponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractComponent.displayName = 'proto.protos.ContractComponent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ContractComponent.repeatedFields_ = [6,7,8,9,10,11,12,13,14,15,16,18,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractComponent.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractComponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractComponent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractComponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    cname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    state: jspb.Message.getFieldWithDefault(msg, 5, ""),
    preconditionList: jspb.Message.toObjectList(msg.getPreconditionList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    completeconditionList: jspb.Message.toObjectList(msg.getCompleteconditionList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    discardconditionList: jspb.Message.toObjectList(msg.getDiscardconditionList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    nexttasksList: jspb.Message.getField(msg, 9),
    datalistList: jspb.Message.toObjectList(msg.getDatalistList(),
    proto.protos.ComponentData.toObject, includeInstance),
    datavaluesetterexpressionlistList: jspb.Message.toObjectList(msg.getDatavaluesetterexpressionlistList(),
    proto.protos.ComponentsExpression.toObject, includeInstance),
    candidatelistList: jspb.Message.toObjectList(msg.getCandidatelistList(),
    proto.protos.ContractComponentSub.toObject, includeInstance),
    decisionresultList: jspb.Message.toObjectList(msg.getDecisionresultList(),
    proto.protos.ContractComponentSub.toObject, includeInstance),
    tasklistList: jspb.Message.getField(msg, 14),
    supportargumentsList: jspb.Message.getField(msg, 15),
    againstargumentsList: jspb.Message.getField(msg, 16),
    support: jspb.Message.getFieldWithDefault(msg, 17, 0),
    textList: jspb.Message.getField(msg, 18),
    taskexecuteidx: jspb.Message.getFieldWithDefault(msg, 19, 0),
    taskid: jspb.Message.getFieldWithDefault(msg, 20, ""),
    selectbranchesList: jspb.Message.toObjectList(msg.getSelectbranchesList(),
    proto.protos.SelectBranchExpression.toObject, includeInstance),
    metaattributeMap: (f = msg.getMetaattributeMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractComponent}
 */
proto.protos.ContractComponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractComponent;
  return proto.protos.ContractComponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractComponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractComponent}
 */
proto.protos.ContractComponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 6:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addPrecondition(value);
      break;
    case 7:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addCompletecondition(value);
      break;
    case 8:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addDiscardcondition(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addNexttasks(value);
      break;
    case 10:
      var value = new proto.protos.ComponentData;
      reader.readMessage(value,proto.protos.ComponentData.deserializeBinaryFromReader);
      msg.addDatalist(value);
      break;
    case 11:
      var value = new proto.protos.ComponentsExpression;
      reader.readMessage(value,proto.protos.ComponentsExpression.deserializeBinaryFromReader);
      msg.addDatavaluesetterexpressionlist(value);
      break;
    case 12:
      var value = new proto.protos.ContractComponentSub;
      reader.readMessage(value,proto.protos.ContractComponentSub.deserializeBinaryFromReader);
      msg.addCandidatelist(value);
      break;
    case 13:
      var value = new proto.protos.ContractComponentSub;
      reader.readMessage(value,proto.protos.ContractComponentSub.deserializeBinaryFromReader);
      msg.addDecisionresult(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addTasklist(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportarguments(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addAgainstarguments(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSupport(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addText(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaskexecuteidx(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskid(value);
      break;
    case 21:
      var value = new proto.protos.SelectBranchExpression;
      reader.readMessage(value,proto.protos.SelectBranchExpression.deserializeBinaryFromReader);
      msg.addSelectbranches(value);
      break;
    case 22:
      var value = msg.getMetaattributeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractComponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractComponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractComponent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractComponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPreconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getCompleteconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getDiscardconditionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getNexttasksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getDatalistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.protos.ComponentData.serializeBinaryToWriter
    );
  }
  f = message.getDatavaluesetterexpressionlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.protos.ComponentsExpression.serializeBinaryToWriter
    );
  }
  f = message.getCandidatelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.protos.ContractComponentSub.serializeBinaryToWriter
    );
  }
  f = message.getDecisionresultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.protos.ContractComponentSub.serializeBinaryToWriter
    );
  }
  f = message.getTasklistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getSupportargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getAgainstargumentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getSupport();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getTextList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getTaskexecuteidx();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getTaskid();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getSelectbranchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.protos.SelectBranchExpression.serializeBinaryToWriter
    );
  }
  f = message.getMetaattributeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(22, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string Cname = 1;
 * @return {string}
 */
proto.protos.ContractComponent.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractComponent.prototype.setCname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Ctype = 2;
 * @return {string}
 */
proto.protos.ContractComponent.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ContractComponent.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Caption = 3;
 * @return {string}
 */
proto.protos.ContractComponent.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractComponent.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Description = 4;
 * @return {string}
 */
proto.protos.ContractComponent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ContractComponent.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string State = 5;
 * @return {string}
 */
proto.protos.ContractComponent.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ContractComponent.prototype.setState = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated ComponentsExpression PreCondition = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponent.prototype.getPreconditionList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 6));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponent.prototype.setPreconditionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponent.prototype.addPrecondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponent.prototype.clearPreconditionList = function() {
  this.setPreconditionList([]);
};


/**
 * repeated ComponentsExpression CompleteCondition = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponent.prototype.getCompleteconditionList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 7));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponent.prototype.setCompleteconditionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponent.prototype.addCompletecondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponent.prototype.clearCompleteconditionList = function() {
  this.setCompleteconditionList([]);
};


/**
 * repeated ComponentsExpression DiscardCondition = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponent.prototype.getDiscardconditionList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 8));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponent.prototype.setDiscardconditionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponent.prototype.addDiscardcondition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponent.prototype.clearDiscardconditionList = function() {
  this.setDiscardconditionList([]);
};


/**
 * repeated string NextTasks = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponent.prototype.getNexttasksList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 9));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponent.prototype.setNexttasksList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponent.prototype.addNexttasks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.protos.ContractComponent.prototype.clearNexttasksList = function() {
  this.setNexttasksList([]);
};


/**
 * repeated ComponentData DataList = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentData>}
 */
proto.protos.ContractComponent.prototype.getDatalistList = function() {
  return /** @type{!Array.<!proto.protos.ComponentData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentData, 10));
};


/** @param {!Array.<!proto.protos.ComponentData>} value */
proto.protos.ContractComponent.prototype.setDatalistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.protos.ComponentData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentData}
 */
proto.protos.ContractComponent.prototype.addDatalist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.protos.ComponentData, opt_index);
};


proto.protos.ContractComponent.prototype.clearDatalistList = function() {
  this.setDatalistList([]);
};


/**
 * repeated ComponentsExpression DataValueSetterExpressionList = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ComponentsExpression>}
 */
proto.protos.ContractComponent.prototype.getDatavaluesetterexpressionlistList = function() {
  return /** @type{!Array.<!proto.protos.ComponentsExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ComponentsExpression, 11));
};


/** @param {!Array.<!proto.protos.ComponentsExpression>} value */
proto.protos.ContractComponent.prototype.setDatavaluesetterexpressionlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.protos.ComponentsExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ComponentsExpression}
 */
proto.protos.ContractComponent.prototype.addDatavaluesetterexpressionlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protos.ComponentsExpression, opt_index);
};


proto.protos.ContractComponent.prototype.clearDatavaluesetterexpressionlistList = function() {
  this.setDatavaluesetterexpressionlistList([]);
};


/**
 * repeated ContractComponentSub CandidateList = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ContractComponentSub>}
 */
proto.protos.ContractComponent.prototype.getCandidatelistList = function() {
  return /** @type{!Array.<!proto.protos.ContractComponentSub>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ContractComponentSub, 12));
};


/** @param {!Array.<!proto.protos.ContractComponentSub>} value */
proto.protos.ContractComponent.prototype.setCandidatelistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.protos.ContractComponentSub=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ContractComponentSub}
 */
proto.protos.ContractComponent.prototype.addCandidatelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.protos.ContractComponentSub, opt_index);
};


proto.protos.ContractComponent.prototype.clearCandidatelistList = function() {
  this.setCandidatelistList([]);
};


/**
 * repeated ContractComponentSub DecisionResult = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ContractComponentSub>}
 */
proto.protos.ContractComponent.prototype.getDecisionresultList = function() {
  return /** @type{!Array.<!proto.protos.ContractComponentSub>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ContractComponentSub, 13));
};


/** @param {!Array.<!proto.protos.ContractComponentSub>} value */
proto.protos.ContractComponent.prototype.setDecisionresultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.protos.ContractComponentSub=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ContractComponentSub}
 */
proto.protos.ContractComponent.prototype.addDecisionresult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.protos.ContractComponentSub, opt_index);
};


proto.protos.ContractComponent.prototype.clearDecisionresultList = function() {
  this.setDecisionresultList([]);
};


/**
 * repeated string TaskList = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponent.prototype.getTasklistList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 14));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponent.prototype.setTasklistList = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponent.prototype.addTasklist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


proto.protos.ContractComponent.prototype.clearTasklistList = function() {
  this.setTasklistList([]);
};


/**
 * repeated string SupportArguments = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponent.prototype.getSupportargumentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 15));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponent.prototype.setSupportargumentsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponent.prototype.addSupportarguments = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.protos.ContractComponent.prototype.clearSupportargumentsList = function() {
  this.setSupportargumentsList([]);
};


/**
 * repeated string AgainstArguments = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponent.prototype.getAgainstargumentsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 16));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponent.prototype.setAgainstargumentsList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponent.prototype.addAgainstarguments = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.protos.ContractComponent.prototype.clearAgainstargumentsList = function() {
  this.setAgainstargumentsList([]);
};


/**
 * optional int32 Support = 17;
 * @return {number}
 */
proto.protos.ContractComponent.prototype.getSupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protos.ContractComponent.prototype.setSupport = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * repeated string Text = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractComponent.prototype.getTextList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 18));
};


/** @param {!Array.<string>} value */
proto.protos.ContractComponent.prototype.setTextList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractComponent.prototype.addText = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.protos.ContractComponent.prototype.clearTextList = function() {
  this.setTextList([]);
};


/**
 * optional int32 TaskExecuteIdx = 19;
 * @return {number}
 */
proto.protos.ContractComponent.prototype.getTaskexecuteidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protos.ContractComponent.prototype.setTaskexecuteidx = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string TaskId = 20;
 * @return {string}
 */
proto.protos.ContractComponent.prototype.getTaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.protos.ContractComponent.prototype.setTaskid = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * repeated SelectBranchExpression SelectBranches = 21;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.SelectBranchExpression>}
 */
proto.protos.ContractComponent.prototype.getSelectbranchesList = function() {
  return /** @type{!Array.<!proto.protos.SelectBranchExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.SelectBranchExpression, 21));
};


/** @param {!Array.<!proto.protos.SelectBranchExpression>} value */
proto.protos.ContractComponent.prototype.setSelectbranchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.protos.SelectBranchExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.SelectBranchExpression}
 */
proto.protos.ContractComponent.prototype.addSelectbranches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.protos.SelectBranchExpression, opt_index);
};


proto.protos.ContractComponent.prototype.clearSelectbranchesList = function() {
  this.setSelectbranchesList([]);
};


/**
 * map<string, string> MetaAttribute = 22;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.ContractComponent.prototype.getMetaattributeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 22, opt_noLazyCreate,
      null));
};


proto.protos.ContractComponent.prototype.clearMetaattributeMap = function() {
  this.getMetaattributeMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ContractBody.repeatedFields_, null);
};
goog.inherits(proto.protos.ContractBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractBody.displayName = 'proto.protos.ContractBody';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ContractBody.repeatedFields_ = [11,12,13,14,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractBody.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractBody} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    contractstate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    creator: jspb.Message.getFieldWithDefault(msg, 7, ""),
    createtime: jspb.Message.getFieldWithDefault(msg, 8, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 9, ""),
    endtime: jspb.Message.getFieldWithDefault(msg, 10, ""),
    contractownersList: jspb.Message.getField(msg, 11),
    contractassetsList: jspb.Message.toObjectList(msg.getContractassetsList(),
    proto.protos.ContractAsset.toObject, includeInstance),
    contractsignaturesList: jspb.Message.toObjectList(msg.getContractsignaturesList(),
    proto.protos.ContractSignature.toObject, includeInstance),
    contractcomponentsList: jspb.Message.toObjectList(msg.getContractcomponentsList(),
    proto.protos.ContractComponent.toObject, includeInstance),
    metaattributeMap: (f = msg.getMetaattributeMap()) ? f.toObject(includeInstance, undefined) : [],
    nexttasksList: jspb.Message.getField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractBody}
 */
proto.protos.ContractBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractBody;
  return proto.protos.ContractBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractBody}
 */
proto.protos.ContractBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractstate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatetime(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndtime(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addContractowners(value);
      break;
    case 12:
      var value = new proto.protos.ContractAsset;
      reader.readMessage(value,proto.protos.ContractAsset.deserializeBinaryFromReader);
      msg.addContractassets(value);
      break;
    case 13:
      var value = new proto.protos.ContractSignature;
      reader.readMessage(value,proto.protos.ContractSignature.deserializeBinaryFromReader);
      msg.addContractsignatures(value);
      break;
    case 14:
      var value = new proto.protos.ContractComponent;
      reader.readMessage(value,proto.protos.ContractComponent.deserializeBinaryFromReader);
      msg.addContractcomponents(value);
      break;
    case 15:
      var value = msg.getMetaattributeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addNexttasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractBody} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getContractstate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreatetime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEndtime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getContractownersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getContractassetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.protos.ContractAsset.serializeBinaryToWriter
    );
  }
  f = message.getContractsignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.protos.ContractSignature.serializeBinaryToWriter
    );
  }
  f = message.getContractcomponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.protos.ContractComponent.serializeBinaryToWriter
    );
  }
  f = message.getMetaattributeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getNexttasksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
};


/**
 * optional string ContractId = 1;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setContractid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Cname = 2;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setCname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Ctype = 3;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Caption = 4;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Description = 5;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string ContractState = 6;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getContractstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setContractstate = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Creator = 7;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setCreator = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string CreateTime = 8;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getCreatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setCreatetime = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string StartTime = 9;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string EndTime = 10;
 * @return {string}
 */
proto.protos.ContractBody.prototype.getEndtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protos.ContractBody.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * repeated string ContractOwners = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractBody.prototype.getContractownersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 11));
};


/** @param {!Array.<string>} value */
proto.protos.ContractBody.prototype.setContractownersList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractBody.prototype.addContractowners = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.protos.ContractBody.prototype.clearContractownersList = function() {
  this.setContractownersList([]);
};


/**
 * repeated ContractAsset ContractAssets = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ContractAsset>}
 */
proto.protos.ContractBody.prototype.getContractassetsList = function() {
  return /** @type{!Array.<!proto.protos.ContractAsset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ContractAsset, 12));
};


/** @param {!Array.<!proto.protos.ContractAsset>} value */
proto.protos.ContractBody.prototype.setContractassetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.protos.ContractAsset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ContractAsset}
 */
proto.protos.ContractBody.prototype.addContractassets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.protos.ContractAsset, opt_index);
};


proto.protos.ContractBody.prototype.clearContractassetsList = function() {
  this.setContractassetsList([]);
};


/**
 * repeated ContractSignature ContractSignatures = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ContractSignature>}
 */
proto.protos.ContractBody.prototype.getContractsignaturesList = function() {
  return /** @type{!Array.<!proto.protos.ContractSignature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ContractSignature, 13));
};


/** @param {!Array.<!proto.protos.ContractSignature>} value */
proto.protos.ContractBody.prototype.setContractsignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.protos.ContractSignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ContractSignature}
 */
proto.protos.ContractBody.prototype.addContractsignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.protos.ContractSignature, opt_index);
};


proto.protos.ContractBody.prototype.clearContractsignaturesList = function() {
  this.setContractsignaturesList([]);
};


/**
 * repeated ContractComponent ContractComponents = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ContractComponent>}
 */
proto.protos.ContractBody.prototype.getContractcomponentsList = function() {
  return /** @type{!Array.<!proto.protos.ContractComponent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ContractComponent, 14));
};


/** @param {!Array.<!proto.protos.ContractComponent>} value */
proto.protos.ContractBody.prototype.setContractcomponentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.protos.ContractComponent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ContractComponent}
 */
proto.protos.ContractBody.prototype.addContractcomponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.protos.ContractComponent, opt_index);
};


proto.protos.ContractBody.prototype.clearContractcomponentsList = function() {
  this.setContractcomponentsList([]);
};


/**
 * map<string, string> MetaAttribute = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.ContractBody.prototype.getMetaattributeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


proto.protos.ContractBody.prototype.clearMetaattributeMap = function() {
  this.getMetaattributeMap().clear();
};


/**
 * repeated string NextTasks = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.protos.ContractBody.prototype.getNexttasksList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 16));
};


/** @param {!Array.<string>} value */
proto.protos.ContractBody.prototype.setNexttasksList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.protos.ContractBody.prototype.addNexttasks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


proto.protos.ContractBody.prototype.clearNexttasksList = function() {
  this.setNexttasksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractHead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ContractHead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractHead.displayName = 'proto.protos.ContractHead';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractHead.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractHead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractHead} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractHead.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainpubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assigntime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    operatetime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    consensusresult: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractHead}
 */
proto.protos.ContractHead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractHead;
  return proto.protos.ContractHead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractHead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractHead}
 */
proto.protos.ContractHead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainpubkey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssigntime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConsensusresult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractHead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractHead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractHead} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractHead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainpubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAssigntime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOperatetime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConsensusresult();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string MainPubkey = 1;
 * @return {string}
 */
proto.protos.ContractHead.prototype.getMainpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractHead.prototype.setMainpubkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 Version = 2;
 * @return {number}
 */
proto.protos.ContractHead.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protos.ContractHead.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string AssignTime = 3;
 * @return {string}
 */
proto.protos.ContractHead.prototype.getAssigntime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractHead.prototype.setAssigntime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string OperateTime = 4;
 * @return {string}
 */
proto.protos.ContractHead.prototype.getOperatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ContractHead.prototype.setOperatetime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 ConsensusResult = 5;
 * @return {number}
 */
proto.protos.ContractHead.prototype.getConsensusresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protos.ContractHead.prototype.setConsensusresult = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.Contract.displayName = 'proto.protos.Contract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.Contract} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contracthead: (f = msg.getContracthead()) && proto.protos.ContractHead.toObject(includeInstance, f),
    contractbody: (f = msg.getContractbody()) && proto.protos.ContractBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.Contract}
 */
proto.protos.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.Contract;
  return proto.protos.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.Contract}
 */
proto.protos.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.protos.ContractHead;
      reader.readMessage(value,proto.protos.ContractHead.deserializeBinaryFromReader);
      msg.setContracthead(value);
      break;
    case 3:
      var value = new proto.protos.ContractBody;
      reader.readMessage(value,proto.protos.ContractBody.deserializeBinaryFromReader);
      msg.setContractbody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.Contract} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContracthead();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.ContractHead.serializeBinaryToWriter
    );
  }
  f = message.getContractbody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.ContractBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.protos.Contract.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.Contract.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ContractHead ContractHead = 2;
 * @return {?proto.protos.ContractHead}
 */
proto.protos.Contract.prototype.getContracthead = function() {
  return /** @type{?proto.protos.ContractHead} */ (
    jspb.Message.getWrapperField(this, proto.protos.ContractHead, 2));
};


/** @param {?proto.protos.ContractHead|undefined} value */
proto.protos.Contract.prototype.setContracthead = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protos.Contract.prototype.clearContracthead = function() {
  this.setContracthead(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.Contract.prototype.hasContracthead = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ContractBody ContractBody = 3;
 * @return {?proto.protos.ContractBody}
 */
proto.protos.Contract.prototype.getContractbody = function() {
  return /** @type{?proto.protos.ContractBody} */ (
    jspb.Message.getWrapperField(this, proto.protos.ContractBody, 3));
};


/** @param {?proto.protos.ContractBody|undefined} value */
proto.protos.Contract.prototype.setContractbody = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.protos.Contract.prototype.clearContractbody = function() {
  this.setContractbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protos.Contract.prototype.hasContractbody = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractExecuteLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ContractExecuteLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractExecuteLog.displayName = 'proto.protos.ContractExecuteLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractExecuteLog.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractExecuteLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractExecuteLog} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractExecuteLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    contracthashid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    taskid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    caption: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ctype: jspb.Message.getFieldWithDefault(msg, 6, ""),
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    metaattributeMap: (f = msg.getMetaattributeMap()) ? f.toObject(includeInstance, undefined) : [],
    state: jspb.Message.getFieldWithDefault(msg, 9, ""),
    createtime: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractExecuteLog}
 */
proto.protos.ContractExecuteLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractExecuteLog;
  return proto.protos.ContractExecuteLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractExecuteLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractExecuteLog}
 */
proto.protos.ContractExecuteLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracthashid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtype(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = msg.getMetaattributeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractExecuteLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractExecuteLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractExecuteLog} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractExecuteLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContracthashid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTaskid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCaption();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCtype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMetaattributeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreatetime();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string ContractHashId = 1;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getContracthashid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setContracthashid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string TaskId = 2;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getTaskid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setTaskid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Timestamp = 3;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string Caption = 4;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string Cname = 5;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getCname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setCname = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string Ctype = 6;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getCtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setCtype = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string Description = 7;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * map<string, string> MetaAttribute = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protos.ContractExecuteLog.prototype.getMetaattributeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


proto.protos.ContractExecuteLog.prototype.clearMetaattributeMap = function() {
  this.getMetaattributeMap().clear();
};


/**
 * optional string State = 9;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setState = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string CreateTime = 10;
 * @return {string}
 */
proto.protos.ContractExecuteLog.prototype.getCreatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protos.ContractExecuteLog.prototype.setCreatetime = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractExecuteLogList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ContractExecuteLogList.repeatedFields_, null);
};
goog.inherits(proto.protos.ContractExecuteLogList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractExecuteLogList.displayName = 'proto.protos.ContractExecuteLogList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ContractExecuteLogList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractExecuteLogList.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractExecuteLogList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractExecuteLogList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractExecuteLogList.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractlogsList: jspb.Message.toObjectList(msg.getContractlogsList(),
    proto.protos.ContractExecuteLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractExecuteLogList}
 */
proto.protos.ContractExecuteLogList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractExecuteLogList;
  return proto.protos.ContractExecuteLogList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractExecuteLogList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractExecuteLogList}
 */
proto.protos.ContractExecuteLogList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.ContractExecuteLog;
      reader.readMessage(value,proto.protos.ContractExecuteLog.deserializeBinaryFromReader);
      msg.addContractlogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractExecuteLogList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractExecuteLogList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractExecuteLogList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractExecuteLogList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractlogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.ContractExecuteLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContractExecuteLog ContractLogs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.ContractExecuteLog>}
 */
proto.protos.ContractExecuteLogList.prototype.getContractlogsList = function() {
  return /** @type{!Array.<!proto.protos.ContractExecuteLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.ContractExecuteLog, 1));
};


/** @param {!Array.<!proto.protos.ContractExecuteLog>} value */
proto.protos.ContractExecuteLogList.prototype.setContractlogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.ContractExecuteLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ContractExecuteLog}
 */
proto.protos.ContractExecuteLogList.prototype.addContractlogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.ContractExecuteLog, opt_index);
};


proto.protos.ContractExecuteLogList.prototype.clearContractlogsList = function() {
  this.setContractlogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ContractList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ContractList.repeatedFields_, null);
};
goog.inherits(proto.protos.ContractList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ContractList.displayName = 'proto.protos.ContractList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ContractList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ContractList.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ContractList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ContractList} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ContractList.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractsList: jspb.Message.toObjectList(msg.getContractsList(),
    proto.protos.Contract.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ContractList}
 */
proto.protos.ContractList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ContractList;
  return proto.protos.ContractList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ContractList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ContractList}
 */
proto.protos.ContractList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.Contract;
      reader.readMessage(value,proto.protos.Contract.deserializeBinaryFromReader);
      msg.addContracts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ContractList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ContractList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ContractList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ContractList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.Contract.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Contract contracts = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.protos.Contract>}
 */
proto.protos.ContractList.prototype.getContractsList = function() {
  return /** @type{!Array.<!proto.protos.Contract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.Contract, 1));
};


/** @param {!Array.<!proto.protos.Contract>} value */
proto.protos.ContractList.prototype.setContractsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.Contract}
 */
proto.protos.ContractList.prototype.addContracts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.Contract, opt_index);
};


proto.protos.ContractList.prototype.clearContractsList = function() {
  this.setContractsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ResponseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ResponseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protos.ResponseData.displayName = 'proto.protos.ResponseData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ResponseData.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ResponseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ResponseData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.protos.ResponseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getFieldWithDefault(msg, 1, false),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ResponseData}
 */
proto.protos.ResponseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ResponseData;
  return proto.protos.ResponseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ResponseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ResponseData}
 */
proto.protos.ResponseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ResponseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ResponseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ResponseData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.protos.ResponseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.protos.ResponseData.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.protos.ResponseData.prototype.setOk = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.protos.ResponseData.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protos.ResponseData.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string data = 3;
 * @return {string}
 */
proto.protos.ResponseData.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protos.ResponseData.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};


