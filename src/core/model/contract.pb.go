// Code generated by protoc-gen-go.
// source: contract.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	contract.proto

It has these top-level messages:
	ContractAttributes
	ContractSignature
	Metadata
	ContractAssert
	PlanTaskCondition
	Plan
	Task
	ContractComponents
	Contract
	ContractProto
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContractAttributes struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	StartTimestamp   *int64  `protobuf:"varint,2,req,name=start_timestamp" json:"start_timestamp,omitempty"`
	EndTimestamp     *int64  `protobuf:"varint,3,req,name=end_timestamp" json:"end_timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContractAttributes) Reset()                    { *m = ContractAttributes{} }
func (m *ContractAttributes) String() string            { return proto.CompactTextString(m) }
func (*ContractAttributes) ProtoMessage()               {}
func (*ContractAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ContractAttributes) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ContractAttributes) GetStartTimestamp() int64 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *ContractAttributes) GetEndTimestamp() int64 {
	if m != nil && m.EndTimestamp != nil {
		return *m.EndTimestamp
	}
	return 0
}

type ContractSignature struct {
	OwnerPubkey      *string `protobuf:"bytes,1,req,name=owner_pubkey" json:"owner_pubkey,omitempty"`
	Signature        *string `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
	Timestamp        *int64  `protobuf:"varint,3,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContractSignature) Reset()                    { *m = ContractSignature{} }
func (m *ContractSignature) String() string            { return proto.CompactTextString(m) }
func (*ContractSignature) ProtoMessage()               {}
func (*ContractSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ContractSignature) GetOwnerPubkey() string {
	if m != nil && m.OwnerPubkey != nil {
		return *m.OwnerPubkey
	}
	return ""
}

func (m *ContractSignature) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *ContractSignature) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type Metadata struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ContractAssert struct {
	Id               *string   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name             *string   `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Amount           *float32  `protobuf:"fixed32,3,req,name=amount" json:"amount,omitempty"`
	Metadata         *Metadata `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ContractAssert) Reset()                    { *m = ContractAssert{} }
func (m *ContractAssert) String() string            { return proto.CompactTextString(m) }
func (*ContractAssert) ProtoMessage()               {}
func (*ContractAssert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ContractAssert) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ContractAssert) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ContractAssert) GetAmount() float32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *ContractAssert) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PlanTaskCondition struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type             *string `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	Name             *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,4,req,name=value" json:"value,omitempty"`
	Description      *string `protobuf:"bytes,5,req,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlanTaskCondition) Reset()                    { *m = PlanTaskCondition{} }
func (m *PlanTaskCondition) String() string            { return proto.CompactTextString(m) }
func (*PlanTaskCondition) ProtoMessage()               {}
func (*PlanTaskCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlanTaskCondition) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *PlanTaskCondition) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *PlanTaskCondition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PlanTaskCondition) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *PlanTaskCondition) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type Plan struct {
	Id               *string              `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type             *string              `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	State            *string              `protobuf:"bytes,3,req,name=state" json:"state,omitempty"`
	Name             *string              `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	Description      *string              `protobuf:"bytes,5,req,name=description" json:"description,omitempty"`
	Condition        []*PlanTaskCondition `protobuf:"bytes,6,rep,name=condition" json:"condition,omitempty"`
	Level            *int32               `protobuf:"varint,7,req,name=level" json:"level,omitempty"`
	ContractType     *string              `protobuf:"bytes,8,req,name=contract_type" json:"contract_type,omitempty"`
	NextTask         []string             `protobuf:"bytes,9,rep,name=next_task" json:"next_task,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Plan) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Plan) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Plan) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Plan) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Plan) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Plan) GetCondition() []*PlanTaskCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Plan) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Plan) GetContractType() string {
	if m != nil && m.ContractType != nil {
		return *m.ContractType
	}
	return ""
}

func (m *Plan) GetNextTask() []string {
	if m != nil {
		return m.NextTask
	}
	return nil
}

type Task struct {
	Id               *string              `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type             *string              `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	State            *string              `protobuf:"bytes,3,req,name=state" json:"state,omitempty"`
	Name             *string              `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	Description      *string              `protobuf:"bytes,5,req,name=description" json:"description,omitempty"`
	Condition        []*PlanTaskCondition `protobuf:"bytes,6,rep,name=condition" json:"condition,omitempty"`
	Level            *int32               `protobuf:"varint,7,req,name=level" json:"level,omitempty"`
	ContractType     *string              `protobuf:"bytes,8,req,name=contract_type" json:"contract_type,omitempty"`
	NextTask         []string             `protobuf:"bytes,9,rep,name=next_task" json:"next_task,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Task) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Task) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Task) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *Task) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Task) GetCondition() []*PlanTaskCondition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Task) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Task) GetContractType() string {
	if m != nil && m.ContractType != nil {
		return *m.ContractType
	}
	return ""
}

func (m *Task) GetNextTask() []string {
	if m != nil {
		return m.NextTask
	}
	return nil
}

type ContractComponents struct {
	Plans            []*Plan `protobuf:"bytes,1,rep,name=plans" json:"plans,omitempty"`
	Tasks            []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContractComponents) Reset()                    { *m = ContractComponents{} }
func (m *ContractComponents) String() string            { return proto.CompactTextString(m) }
func (*ContractComponents) ProtoMessage()               {}
func (*ContractComponents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ContractComponents) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *ContractComponents) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Contract struct {
	CreatorPubkey      *string              `protobuf:"bytes,1,req,name=creator_pubkey" json:"creator_pubkey,omitempty"`
	CreateTimestamp    *int64               `protobuf:"varint,2,req,name=create_timestamp" json:"create_timestamp,omitempty"`
	Operation          *string              `protobuf:"bytes,3,req,name=operation" json:"operation,omitempty"`
	ContractAttributes *ContractAttributes  `protobuf:"bytes,4,req,name=contract_attributes" json:"contract_attributes,omitempty"`
	ContractOwners     []string             `protobuf:"bytes,5,rep,name=contract_owners" json:"contract_owners,omitempty"`
	ContractSignatures []*ContractSignature `protobuf:"bytes,6,rep,name=contract_signatures" json:"contract_signatures,omitempty"`
	ContractAsserts    []*ContractAssert    `protobuf:"bytes,7,rep,name=contract_asserts" json:"contract_asserts,omitempty"`
	ContractComponents *ContractComponents  `protobuf:"bytes,8,req,name=contract_components" json:"contract_components,omitempty"`
	XXX_unrecognized   []byte               `json:"-"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Contract) GetCreatorPubkey() string {
	if m != nil && m.CreatorPubkey != nil {
		return *m.CreatorPubkey
	}
	return ""
}

func (m *Contract) GetCreateTimestamp() int64 {
	if m != nil && m.CreateTimestamp != nil {
		return *m.CreateTimestamp
	}
	return 0
}

func (m *Contract) GetOperation() string {
	if m != nil && m.Operation != nil {
		return *m.Operation
	}
	return ""
}

func (m *Contract) GetContractAttributes() *ContractAttributes {
	if m != nil {
		return m.ContractAttributes
	}
	return nil
}

func (m *Contract) GetContractOwners() []string {
	if m != nil {
		return m.ContractOwners
	}
	return nil
}

func (m *Contract) GetContractSignatures() []*ContractSignature {
	if m != nil {
		return m.ContractSignatures
	}
	return nil
}

func (m *Contract) GetContractAsserts() []*ContractAssert {
	if m != nil {
		return m.ContractAsserts
	}
	return nil
}

func (m *Contract) GetContractComponents() *ContractComponents {
	if m != nil {
		return m.ContractComponents
	}
	return nil
}

type ContractProto struct {
	Id               *string   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	NodePubkey       *string   `protobuf:"bytes,2,req,name=node_pubkey" json:"node_pubkey,omitempty"`
	MainPubkey       *string   `protobuf:"bytes,3,req,name=main_pubkey" json:"main_pubkey,omitempty"`
	Signature        *string   `protobuf:"bytes,4,req,name=signature" json:"signature,omitempty"`
	Voters           []string  `protobuf:"bytes,5,rep,name=voters" json:"voters,omitempty"`
	Timestamp        *int64    `protobuf:"varint,6,req,name=timestamp" json:"timestamp,omitempty"`
	Version          *string   `protobuf:"bytes,7,req,name=version" json:"version,omitempty"`
	Contract         *Contract `protobuf:"bytes,8,req,name=contract" json:"contract,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ContractProto) Reset()                    { *m = ContractProto{} }
func (m *ContractProto) String() string            { return proto.CompactTextString(m) }
func (*ContractProto) ProtoMessage()               {}
func (*ContractProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ContractProto) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ContractProto) GetNodePubkey() string {
	if m != nil && m.NodePubkey != nil {
		return *m.NodePubkey
	}
	return ""
}

func (m *ContractProto) GetMainPubkey() string {
	if m != nil && m.MainPubkey != nil {
		return *m.MainPubkey
	}
	return ""
}

func (m *ContractProto) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *ContractProto) GetVoters() []string {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *ContractProto) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ContractProto) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ContractProto) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractAttributes)(nil), "protos.ContractAttributes")
	proto.RegisterType((*ContractSignature)(nil), "protos.ContractSignature")
	proto.RegisterType((*Metadata)(nil), "protos.Metadata")
	proto.RegisterType((*ContractAssert)(nil), "protos.ContractAssert")
	proto.RegisterType((*PlanTaskCondition)(nil), "protos.PlanTaskCondition")
	proto.RegisterType((*Plan)(nil), "protos.Plan")
	proto.RegisterType((*Task)(nil), "protos.Task")
	proto.RegisterType((*ContractComponents)(nil), "protos.ContractComponents")
	proto.RegisterType((*Contract)(nil), "protos.Contract")
	proto.RegisterType((*ContractProto)(nil), "protos.ContractProto")
}

func init() { proto.RegisterFile("contract.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0x4b, 0x8f, 0xd3, 0x30,
	0x10, 0xc7, 0xd5, 0xa4, 0xe9, 0x63, 0xfa, 0x76, 0x61, 0xd7, 0xc0, 0x25, 0xca, 0xa9, 0x07, 0xb4,
	0x42, 0x3d, 0xc0, 0x19, 0xf5, 0x0c, 0xac, 0x80, 0x33, 0x95, 0x37, 0x19, 0xa1, 0xa8, 0x8d, 0x1d,
	0xd9, 0xd3, 0xc2, 0x7e, 0x2b, 0xae, 0xdc, 0xf9, 0x60, 0xc8, 0x6e, 0x9c, 0x76, 0x93, 0x85, 0xfb,
	0x9e, 0xaa, 0x8c, 0xeb, 0xdf, 0xfc, 0xe7, 0xf1, 0x37, 0x4c, 0x53, 0x25, 0x49, 0x8b, 0x94, 0x6e,
	0x4a, 0xad, 0x48, 0xb1, 0x9e, 0xfb, 0x31, 0xc9, 0x67, 0x60, 0x9b, 0xea, 0xe4, 0x3d, 0x91, 0xce,
	0xef, 0x0e, 0x84, 0x86, 0x8d, 0xa1, 0x2b, 0x45, 0x81, 0xbc, 0x13, 0x07, 0xab, 0x21, 0xbb, 0x86,
	0x99, 0x21, 0xa1, 0x69, 0x4b, 0x79, 0x81, 0x86, 0x44, 0x51, 0xf2, 0x20, 0x0e, 0x56, 0x21, 0x7b,
	0x0e, 0x13, 0x94, 0xd9, 0x45, 0x38, 0xb4, 0xe1, 0xe4, 0x13, 0x2c, 0x3c, 0xf3, 0x4b, 0xfe, 0x5d,
	0x0a, 0x3a, 0x68, 0x64, 0xcf, 0x60, 0xac, 0x7e, 0x48, 0xd4, 0xdb, 0xf2, 0x70, 0xb7, 0xc3, 0xfb,
	0x0a, 0xbd, 0x80, 0xa1, 0xf1, 0x7f, 0x71, 0x50, 0x17, 0x6a, 0x02, 0x01, 0x06, 0x1f, 0x90, 0x44,
	0x26, 0x48, 0x24, 0xdf, 0x60, 0x5a, 0x0b, 0x36, 0x06, 0x35, 0x31, 0x80, 0x20, 0xcf, 0x2a, 0x9e,
	0x17, 0x7e, 0x42, 0x4d, 0xa1, 0x27, 0x0a, 0x75, 0x90, 0xe4, 0x38, 0x01, 0x4b, 0x60, 0x50, 0x54,
	0x1c, 0xde, 0x8d, 0x3b, 0xab, 0xd1, 0x7a, 0x7e, 0x6a, 0x87, 0xb9, 0xa9, 0xf9, 0x5b, 0x58, 0xdc,
	0xee, 0x85, 0xfc, 0x2a, 0xcc, 0x6e, 0xa3, 0x64, 0x96, 0x53, 0xae, 0x64, 0x33, 0x05, 0xdd, 0x97,
	0x3e, 0x85, 0x4f, 0x18, 0xba, 0xaf, 0x09, 0x44, 0x47, 0xb1, 0x3f, 0x20, 0xef, 0xba, 0xcf, 0x25,
	0x8c, 0x32, 0x34, 0xa9, 0xce, 0x4b, 0x4b, 0xe1, 0x91, 0x0d, 0x26, 0xbf, 0x3b, 0xd0, 0xb5, 0x19,
	0xfe, 0x03, 0x9d, 0x40, 0x64, 0x48, 0x90, 0xa7, 0xfa, 0x1c, 0xff, 0x86, 0xb2, 0xd7, 0x30, 0x4c,
	0xbd, 0x5a, 0xde, 0x8b, 0xc3, 0xd5, 0x68, 0xfd, 0xc2, 0x97, 0xd6, 0x2e, 0x67, 0x02, 0xd1, 0x1e,
	0x8f, 0xb8, 0xe7, 0xfd, 0x38, 0x58, 0x45, 0x76, 0x8c, 0x7e, 0x3b, 0xb6, 0x4e, 0xc5, 0xc0, 0x0f,
	0x42, 0xe2, 0x4f, 0xda, 0x92, 0x30, 0x3b, 0x3e, 0x8c, 0xc3, 0x4a, 0xbb, 0x45, 0x3d, 0x45, 0xed,
	0x1f, 0xcf, 0x9b, 0xbe, 0x51, 0x45, 0xa9, 0x24, 0x4a, 0x32, 0xec, 0x15, 0x44, 0xe5, 0x5e, 0x48,
	0xc3, 0x3b, 0x2e, 0xf1, 0xf8, 0x32, 0xb1, 0x3d, 0xb4, 0x00, 0xc3, 0x83, 0x87, 0x87, 0x56, 0x51,
	0xf2, 0x27, 0x80, 0x81, 0x07, 0xb2, 0x2b, 0x98, 0xa6, 0x1a, 0x05, 0xa9, 0xc6, 0x7e, 0x73, 0x98,
	0xbb, 0x38, 0xb6, 0xbc, 0xb3, 0x80, 0xa1, 0x2a, 0x51, 0x0b, 0x57, 0xf5, 0xa9, 0x57, 0xef, 0x60,
	0x59, 0xd7, 0x22, 0x6a, 0x33, 0xba, 0xd6, 0x8d, 0xd6, 0x2f, 0x7d, 0xf2, 0x47, 0xec, 0x7a, 0x0d,
	0xb3, 0xfa, 0xa2, 0x33, 0x99, 0xe1, 0x91, 0xad, 0x99, 0xbd, 0xbd, 0x20, 0xd6, 0x3e, 0x33, 0xcd,
	0x26, 0xb7, 0xcd, 0xfa, 0x06, 0xe6, 0x67, 0x25, 0xce, 0x65, 0x86, 0xf7, 0xdd, 0xa5, 0xab, 0x96,
	0x8c, 0x93, 0x09, 0x2f, 0xb5, 0xa7, 0x75, 0x7b, 0xdd, 0x34, 0x1e, 0xd1, 0x7e, 0x1e, 0x40, 0xf2,
	0xab, 0x03, 0x13, 0x1f, 0xbe, 0x75, 0x4f, 0xd3, 0xe5, 0x6e, 0x2d, 0x61, 0x24, 0x55, 0x86, 0xbe,
	0xa9, 0x81, 0x0f, 0x16, 0x22, 0x97, 0x3e, 0x18, 0xb6, 0x5f, 0x92, 0xae, 0xb7, 0xff, 0x51, 0xd1,
	0xb9, 0x1b, 0x0f, 0x5e, 0x96, 0x9e, 0x9b, 0xc2, 0x0c, 0xfa, 0x47, 0xd4, 0xc6, 0xce, 0xa0, 0xef,
	0xee, 0x24, 0x30, 0xf0, 0x75, 0x54, 0xe2, 0xe7, 0x4d, 0xf1, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0xa5, 0x5a, 0xa1, 0x4c, 0x05, 0x00, 0x00,
}
